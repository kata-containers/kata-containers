name: CI | Run kubernetes tests on amd64
on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      repo:
        required: true
        type: string
      tag:
        required: true
        type: string
      pr-number:
        required: true
        type: string
      commit-hash:
        required: false
        type: string
      target-branch:
        required: false
        type: string
        default: ""

permissions: {}

jobs:
  run-k8s-tests-amd64:
    strategy:
      fail-fast: false
      matrix:
        vmm:
          - clh #cloud-hypervisor
          - dragonball
          - fc #firecracker
          - qemu
          - cloud-hypervisor
        container_runtime:
          - containerd
        snapshotter:
          - devmapper
        k8s:
          - k3s
        include:
          - vmm: qemu
            container_runtime: crio
            snapshotter: ""
            k8s: k0s
    runs-on: ubuntu-22.04
    env:
      DOCKER_REGISTRY: ${{ inputs.registry }}
      DOCKER_REPO: ${{ inputs.repo }}
      DOCKER_TAG: ${{ inputs.tag }}
      GH_PR_NUMBER: ${{ inputs.pr-number }}
      KATA_HYPERVISOR: ${{ matrix.vmm }}
      KUBERNETES: ${{ matrix.k8s }}
      KUBERNETES_EXTRA_PARAMS: ${{ matrix.container_runtime != 'crio' && '' || '--cri-socket remote:unix:///var/run/crio/crio.sock --kubelet-extra-args --cgroup-driver="systemd"' }}
      SNAPSHOTTER: ${{ matrix.snapshotter }}
      USING_NFD: "false"
      K8S_TEST_HOST_TYPE: all
      CONTAINER_RUNTIME: ${{ matrix.container_runtime }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.commit-hash }}
          fetch-depth: 0
          persist-credentials: false

      - name: Rebase atop of the latest target branch
        run: |
          ./tests/git-helper.sh "rebase-atop-of-the-latest-target-branch"
        env:
          TARGET_BRANCH: ${{ inputs.target-branch }}

      - name: Remove unnecessary directories to free up space
        run: |
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/julia*
          sudo rm -rf /opt/az
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /opt/microsoft
          sudo rm -rf /opt/google
          sudo rm -rf /usr/lib/firefox

      - name: Configure CRI-O
        if: matrix.container_runtime == 'crio'
        run: bash tests/integration/kubernetes/gha-run.sh setup-crio

      - name: Deploy ${{ matrix.k8s }}
        run: bash tests/integration/kubernetes/gha-run.sh deploy-k8s
        env:
          CONTAINER_RUNTIME: ${{ matrix.container_runtime }}

      - name: Configure the ${{ matrix.snapshotter }} snapshotter
        if: matrix.snapshotter != ''
        run: bash tests/integration/kubernetes/gha-run.sh configure-snapshotter

      - name: Deploy Kata
        timeout-minutes: 10
        run: bash tests/integration/kubernetes/gha-run.sh deploy-kata

      - name: Install `bats`
        run: bash tests/integration/kubernetes/gha-run.sh install-bats

      - name: Run tests
        timeout-minutes: 30
        run: bash tests/integration/kubernetes/gha-run.sh run-tests

      - name: Collect artifacts ${{ matrix.vmm }}
        if: always()
        run: bash tests/integration/kubernetes/gha-run.sh collect-artifacts
        continue-on-error: true

      - name: Archive artifacts ${{ matrix.vmm }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: k8s-tests-${{ matrix.vmm }}-${{ matrix.snapshotter }}-${{ matrix.k8s }}-${{ inputs.tag }}
          path: /tmp/artifacts
          retention-days: 1

      - name: Delete kata-deploy
        if: always()
        timeout-minutes: 5
        run: bash tests/integration/kubernetes/gha-run.sh cleanup
