From a0cbb60bb58ffaf2ae771c7822f0cb25762076fa Mon Sep 17 00:00:00 2001
From: Miklos Szeredi <mszeredi@redhat.com>
Date: Wed, 20 Nov 2019 14:27:19 +0000
Subject: [PATCH 27/29] virtiofsd: add initial support for shared versions

Not backward compatible with previous kernels, so please only use with
kernel that has version table support (this will need to be cleaned up).

No READDIRPLUS support in the kernel for versioned entries, so disable for
now.

Attribute timeout is set to "infinity", so changes to underlying filesystem
won't be visible.  This also needs to be fixed, but is best for testing the
versioning since the shared version is the only thing that will force
refreshing metadata and dcache lookups.

No caching metadata modifications yet.

Start "ireg" daemon before starting any fuse servers.

Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
Fix by:
Signed-off-by: Liu Bo <bo.liu@linux.alibaba.com>
Only send entryver_out when shared is enabled by:
With help message update from:
Signed-off-by: Xiao Yang <yangx.jy@cn.fujitsu.com>

Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
---
 include/standard-headers/linux/fuse.h |   5 +
 tools/virtiofsd/fuse_lowlevel.c       |  36 ++-
 tools/virtiofsd/fuse_lowlevel.h       |   9 +-
 tools/virtiofsd/helper.c              |   4 +
 tools/virtiofsd/ireg.h                |  33 +++
 tools/virtiofsd/passthrough_ll.c      | 321 +++++++++++++++++++++++++-
 6 files changed, 387 insertions(+), 21 deletions(-)
 create mode 100644 tools/virtiofsd/ireg.h

diff --git a/include/standard-headers/linux/fuse.h b/include/standard-headers/linux/fuse.h
index 82c0a38b59..fbced7caef 100644
--- a/include/standard-headers/linux/fuse.h
+++ b/include/standard-headers/linux/fuse.h
@@ -510,6 +510,11 @@ struct fuse_entry_out {
 	struct fuse_attr attr;
 };
 
+struct fuse_entryver_out {
+	uint64_t        version_index;
+	int64_t         initial_version;
+};
+
 struct fuse_forget_in {
 	uint64_t	nlookup;
 };
diff --git a/tools/virtiofsd/fuse_lowlevel.c b/tools/virtiofsd/fuse_lowlevel.c
index d6256f571b..47231378db 100644
--- a/tools/virtiofsd/fuse_lowlevel.c
+++ b/tools/virtiofsd/fuse_lowlevel.c
@@ -389,28 +389,46 @@ static void fill_open(struct fuse_open_out *arg, const struct fuse_file_info *f)
     }
 }
 
-int fuse_reply_entry(fuse_req_t req, const struct fuse_entry_param *e)
+int fuse_reply_entry(fuse_req_t req, const struct fuse_entry_param *e,
+                     bool shared)
 {
-    struct fuse_entry_out arg;
-    size_t size = sizeof(arg);
+    char buf[sizeof(struct fuse_entry_out) + sizeof(struct fuse_entryver_out)];
+    struct fuse_entry_out *earg = (struct fuse_entry_out *)buf;
+    struct fuse_entryver_out *ever =
+        (struct fuse_entryver_out *)(buf + sizeof(struct fuse_entry_out));
+    size_t size = sizeof(buf);
 
-    memset(&arg, 0, sizeof(arg));
-    fill_entry(&arg, e);
-    return send_reply_ok(req, &arg, size);
+    if ((req->se->conn.proto_minor >= 9) && !shared) {
+        size -= sizeof(struct fuse_entryver_out);
+    }
+
+    memset(buf, 0, sizeof(buf));
+    fill_entry(earg, e);
+    ever->initial_version = e->initial_version;
+    ever->version_index = e->version_offset;
+    return send_reply_ok(req, buf, size);
 }
 
 int fuse_reply_create(fuse_req_t req, const struct fuse_entry_param *e,
-                      const struct fuse_file_info *f)
+                      const struct fuse_file_info *f, bool shared)
 {
-    char buf[sizeof(struct fuse_entry_out) + sizeof(struct fuse_open_out)];
+    char buf[sizeof(struct fuse_entry_out) + sizeof(struct fuse_open_out) +
+             sizeof(struct fuse_entryver_out)];
     size_t entrysize = sizeof(struct fuse_entry_out);
     struct fuse_entry_out *earg = (struct fuse_entry_out *)buf;
     struct fuse_open_out *oarg = (struct fuse_open_out *)(buf + entrysize);
+    struct fuse_entryver_out *ever =
+        (struct fuse_entryver_out *)(buf + entrysize +
+                                     sizeof(struct fuse_open_out));
 
     memset(buf, 0, sizeof(buf));
     fill_entry(earg, e);
     fill_open(oarg, f);
-    return send_reply_ok(req, buf, entrysize + sizeof(struct fuse_open_out));
+    ever->initial_version = e->initial_version;
+    ever->version_index = e->version_offset;
+    return send_reply_ok(req, buf,
+                         entrysize + sizeof(struct fuse_open_out) +
+                             (shared ? sizeof(struct fuse_entryver_out) : 0));
 }
 
 int fuse_reply_attr(fuse_req_t req, const struct stat *attr,
diff --git a/tools/virtiofsd/fuse_lowlevel.h b/tools/virtiofsd/fuse_lowlevel.h
index a36a893871..5f60e3fd2c 100644
--- a/tools/virtiofsd/fuse_lowlevel.h
+++ b/tools/virtiofsd/fuse_lowlevel.h
@@ -26,6 +26,7 @@
 #include "fuse_common.h"
 #include "standard-headers/linux/fuse.h"
 
+#include <stdbool.h>
 #include <sys/statvfs.h>
 #include <sys/uio.h>
 #include <utime.h>
@@ -104,6 +105,9 @@ struct fuse_entry_param {
      * Flags for fuse_attr.flags that do not fit into attr.
      */
     uint32_t attr_flags;
+
+    uint64_t version_offset;
+    int64_t initial_version;
 };
 
 /**
@@ -1294,7 +1298,8 @@ void fuse_reply_none(fuse_req_t req);
  * @param e the entry parameters
  * @return zero for success, -errno for failure to send reply
  */
-int fuse_reply_entry(fuse_req_t req, const struct fuse_entry_param *e);
+int fuse_reply_entry(fuse_req_t req, const struct fuse_entry_param *e,
+                     bool shared);
 
 /**
  * Reply with a directory entry and open parameters
@@ -1314,7 +1319,7 @@ int fuse_reply_entry(fuse_req_t req, const struct fuse_entry_param *e);
  * @return zero for success, -errno for failure to send reply
  */
 int fuse_reply_create(fuse_req_t req, const struct fuse_entry_param *e,
-                      const struct fuse_file_info *fi);
+                      const struct fuse_file_info *fi, bool shared);
 
 /**
  * Reply with attributes
diff --git a/tools/virtiofsd/helper.c b/tools/virtiofsd/helper.c
index 28243b51b2..29331ec2fc 100644
--- a/tools/virtiofsd/helper.c
+++ b/tools/virtiofsd/helper.c
@@ -174,6 +174,10 @@ void fuse_cmdline_help(void)
            "                               default: no_xattr\n"
            "    -o modcaps=CAPLIST         Modify the list of capabilities\n"
            "                               e.g. -o modcaps=+sys_admin:-chown\n"
+           "    -o shared|no_shared        enable/disable shared cache\n"
+           "                               default: no_shared\n"
+           "                               please start 'ireg' daemon before "
+           "                               using shared cache\n"
            "    --rlimit-nofile=<num>      set maximum number of file descriptors\n"
            "                               (0 leaves rlimit unchanged)\n"
            "                               default: min(1000000, fs.file-max - 16384)\n"
diff --git a/tools/virtiofsd/ireg.h b/tools/virtiofsd/ireg.h
new file mode 100644
index 0000000000..91c0f386d7
--- /dev/null
+++ b/tools/virtiofsd/ireg.h
@@ -0,0 +1,33 @@
+#define VERSION_TABLE_MAGIC 0x7265566465726853
+
+enum ireg_op {
+    IREG_GET,
+    IREG_PUT,
+};
+
+struct ireg_msg {
+    enum ireg_op op;
+    uint64_t handle;
+    union {
+        struct {
+            uint64_t ino;
+            uint64_t dev;
+        } get;
+        struct {
+            uint64_t refid;
+        } put;
+    };
+};
+
+enum srv_op {
+    SRV_VERSION,
+};
+
+struct srv_msg {
+    enum srv_op op;
+    uint64_t handle;
+    struct {
+        uint64_t refid;
+        uint64_t offset;
+    } version;
+};
diff --git a/tools/virtiofsd/passthrough_ll.c b/tools/virtiofsd/passthrough_ll.c
index 3af55ffb8a..52a52b2dd7 100644
--- a/tools/virtiofsd/passthrough_ll.c
+++ b/tools/virtiofsd/passthrough_ll.c
@@ -44,16 +44,21 @@
 #include <cap-ng.h>
 #include <dirent.h>
 #include <pthread.h>
+#include <semaphore.h>
 #include <sys/file.h>
+#include <sys/mman.h>
 #include <sys/mount.h>
 #include <sys/prctl.h>
 #include <sys/resource.h>
+#include <sys/socket.h>
 #include <sys/syscall.h>
+#include <sys/un.h>
 #include <sys/wait.h>
 #include <sys/xattr.h>
 #include <syslog.h>
 
 #include "qemu/cutils.h"
+#include "ireg.h"
 #include "passthrough_helpers.h"
 #include "passthrough_seccomp.h"
 
@@ -110,6 +115,8 @@ struct lo_inode {
      */
     uint64_t nlookup;
 
+    uint64_t version_offset;
+    uint64_t ireg_refid;
     fuse_ino_t fuse_ino;
     pthread_mutex_t plock_mutex;
     GHashTable *posix_locks; /* protected by lo_inode->plock_mutex */
@@ -152,12 +159,16 @@ struct lo_data {
     char *modcaps;
     double timeout;
     int cache;
+    int shared;
     int timeout_set;
     int readdirplus_set;
     int readdirplus_clear;
     int allow_direct_io;
     int announce_submounts;
     bool use_statx;
+    int ireg_sock;
+    int64_t *version_table;
+    uint64_t version_table_size;
     struct lo_inode root;
     GHashTable *inodes; /* protected by lo->mutex */
     struct lo_map ino_map; /* protected by lo->mutex */
@@ -193,6 +204,8 @@ static const struct fuse_opt lo_opts[] = {
     { "cache=none", offsetof(struct lo_data, cache), CACHE_NONE },
     { "cache=auto", offsetof(struct lo_data, cache), CACHE_AUTO },
     { "cache=always", offsetof(struct lo_data, cache), CACHE_ALWAYS },
+    { "shared", offsetof(struct lo_data, shared), 1 },
+    { "no_shared", offsetof(struct lo_data, shared), 0 },
     { "readdirplus", offsetof(struct lo_data, readdirplus_set), 1 },
     { "no_readdirplus", offsetof(struct lo_data, readdirplus_clear), 1 },
     { "allow_direct_io", offsetof(struct lo_data, allow_direct_io), 1 },
@@ -204,6 +217,7 @@ static bool use_syslog = false;
 static int current_log_level;
 static void unref_inode_lolocked(struct lo_data *lo, struct lo_inode *inode,
                                  uint64_t n);
+static void put_shared(struct lo_data *lo, struct lo_inode *inode);
 
 static struct {
     pthread_mutex_t mutex;
@@ -512,6 +526,7 @@ static void lo_inode_put(struct lo_data *lo, struct lo_inode **inodep)
 
     if (g_atomic_int_dec_and_test(&inode->refcount)) {
         close(inode->fd);
+        put_shared(lo, inode);
         free(inode);
     }
 }
@@ -587,8 +602,9 @@ static void lo_init(void *userdata, struct fuse_conn_info *conn)
         }
     }
 
+    /* TODO: shared version support for readdirplus */
     if ((lo->cache == CACHE_NONE && !lo->readdirplus_set) ||
-        lo->readdirplus_clear) {
+        lo->readdirplus_clear || lo->shared) {
         fuse_log(FUSE_LOG_DEBUG, "lo_init: disabling readdirplus\n");
         conn->want &= ~FUSE_CAP_READDIRPLUS;
     }
@@ -600,6 +616,29 @@ static void lo_init(void *userdata, struct fuse_conn_info *conn)
     }
 }
 
+static int64_t *version_ptr(struct lo_data *lo, struct lo_inode *inode)
+{
+    return lo->version_table + inode->version_offset;
+}
+
+static int64_t get_version(struct lo_data *lo, struct lo_inode *inode)
+{
+    if (!inode->version_offset) {
+        return 0;
+    }
+
+    return __atomic_load_8(version_ptr(lo, inode), __ATOMIC_SEQ_CST);
+}
+
+static void update_version(struct lo_data *lo, struct lo_inode *inode)
+{
+    if (!inode->version_offset) {
+        return;
+    }
+
+    __atomic_add_fetch(version_ptr(lo, inode), 1, __ATOMIC_SEQ_CST);
+}
+
 static void lo_getattr(fuse_req_t req, fuse_ino_t ino,
                        struct fuse_file_info *fi)
 {
@@ -731,6 +770,7 @@ static void lo_setattr(fuse_req_t req, fuse_ino_t ino, struct stat *attr,
             goto out_err;
         }
     }
+    update_version(lo, inode);
     lo_inode_put(lo, &inode);
 
     return lo_getattr(req, ino, fi);
@@ -763,6 +803,74 @@ static struct lo_inode *lo_find(struct lo_data *lo, struct stat *st,
     return p;
 }
 
+struct msgreply {
+    struct lo_inode *inode;
+    sem_t ready;
+};
+
+static void get_shared(struct lo_data *lo, struct lo_inode *inode)
+{
+    int res;
+    struct msgreply rep = {
+        .inode = inode,
+    };
+    struct ireg_msg msg = {
+        .op = IREG_GET,
+        .handle = (uintptr_t) &rep,
+        .get = {
+                .ino = inode->key.ino,
+                .dev = inode->key.dev,
+            },
+    };
+
+    if (lo->ireg_sock == -1) {
+        inode->version_offset = 0;
+        return;
+    }
+
+    sem_init(&rep.ready, 0, 0);
+
+    res = write(lo->ireg_sock, &msg, sizeof(msg));
+    if (res != sizeof(msg)) {
+        if (res == -1) {
+            fuse_log(FUSE_LOG_WARNING,
+                     "write(lo->ireg_sock, {IREG_GET, ...}): %m\n");
+        } else {
+            fuse_log(FUSE_LOG_WARNING, "short write to ireg_sock: %i\n", res);
+        }
+        return;
+    }
+
+    while (sem_wait(&rep.ready)) {
+        ;
+    }
+    sem_destroy(&rep.ready);
+}
+
+static void put_shared(struct lo_data *lo, struct lo_inode *inode)
+{
+    int res;
+    struct ireg_msg msg = {
+        .op = IREG_PUT,
+        .put.refid = inode->ireg_refid,
+    };
+
+    if (lo->ireg_sock == -1) {
+        return;
+    }
+
+    res = write(lo->ireg_sock, &msg, sizeof(msg));
+    if (res != sizeof(msg)) {
+        if (res == -1) {
+            fuse_log(FUSE_LOG_WARNING,
+                     "write(lo->ireg_sock, {IREG_PUT, ...}): %m\n");
+        } else {
+            fuse_log(FUSE_LOG_WARNING, "short write to ireg_sock: %i\n", res);
+        }
+        return;
+    }
+}
+
 /* value_destroy_func for posix_locks GHashTable */
 static void posix_locks_value_destroy(gpointer data)
 {
@@ -908,16 +1016,30 @@ static int lo_do_lookup(fuse_req_t req, fuse_ino_t parent, const char *name,
                 g_direct_hash, g_direct_equal, NULL, posix_locks_value_destroy);
         }
         pthread_mutex_lock(&lo->mutex);
+        get_shared(lo, inode);
         inode->fuse_ino = lo_add_inode_mapping(req, inode);
         g_hash_table_insert(lo->inodes, &inode->key, inode);
         pthread_mutex_unlock(&lo->mutex);
     }
+
+    e->initial_version = get_version(lo, inode);
+    res = fstatat(inode->fd, "", &e->attr, AT_EMPTY_PATH | AT_SYMLINK_NOFOLLOW);
+    if (res == -1) {
+        saverr = errno;
+        unref_inode_lolocked(lo, inode, 1);
+        errno = saverr;
+        goto out_err;
+    }
+
     e->ino = inode->fuse_ino;
+    e->version_offset = inode->version_offset;
     lo_inode_put(lo, &inode);
     lo_inode_put(lo, &dir);
 
-    fuse_log(FUSE_LOG_DEBUG, "  %lli/%s -> %lli\n", (unsigned long long)parent,
-             name, (unsigned long long)e->ino);
+    fuse_log(FUSE_LOG_DEBUG, "  %lli/%s -> %lli (version_table[%lli]=%lli)\n",
+             (unsigned long long)parent, name, (unsigned long long)e->ino,
+             (unsigned long long)e->version_offset,
+             (unsigned long long)e->initial_version);
 
     return 0;
 
@@ -952,7 +1074,7 @@ static void lo_lookup(fuse_req_t req, fuse_ino_t parent, const char *name)
     if (err) {
         fuse_reply_err(req, err);
     } else {
-        fuse_reply_entry(req, &e);
+        fuse_reply_entry(req, &e, lo_data(req)->shared);
     }
 }
 
@@ -1056,6 +1178,8 @@ static void lo_mknod_symlink(fuse_req_t req, fuse_ino_t parent,
         goto out;
     }
 
+    update_version(lo, dir);
+
     saverr = lo_do_lookup(req, parent, name, &e);
     if (saverr) {
         goto out;
@@ -1064,7 +1188,7 @@ static void lo_mknod_symlink(fuse_req_t req, fuse_ino_t parent,
     fuse_log(FUSE_LOG_DEBUG, "  %lli/%s -> %lli\n", (unsigned long long)parent,
              name, (unsigned long long)e.ino);
 
-    fuse_reply_entry(req, &e);
+    fuse_reply_entry(req, &e, lo->shared);
     lo_inode_put(lo, &dir);
     return;
 
@@ -1134,11 +1258,13 @@ static void lo_link(fuse_req_t req, fuse_ino_t ino, fuse_ino_t parent,
     inode->nlookup++;
     pthread_mutex_unlock(&lo->mutex);
     e.ino = inode->fuse_ino;
+    update_version(lo, inode);
+    update_version(lo, parent_inode);
 
     fuse_log(FUSE_LOG_DEBUG, "  %lli/%s -> %lli\n", (unsigned long long)parent,
              name, (unsigned long long)e.ino);
 
-    fuse_reply_entry(req, &e);
+    fuse_reply_entry(req, &e, lo->shared);
     lo_inode_put(lo, &parent_inode);
     lo_inode_put(lo, &inode);
     return;
@@ -1192,8 +1318,21 @@ static void lo_rmdir(fuse_req_t req, fuse_ino_t parent, const char *name)
     }
 
     res = unlinkat(lo_fd(req, parent), name, AT_REMOVEDIR);
+    if (res == -1) {
+        fuse_reply_err(req, errno);
+    } else {
+        struct lo_inode *parent_inode;
 
-    fuse_reply_err(req, res == -1 ? errno : 0);
+        update_version(lo, inode);
+
+        parent_inode = lo_inode(req, parent);
+        if (parent_inode) {
+            update_version(lo, parent_inode);
+            lo_inode_put(lo, &parent_inode);
+        }
+
+        fuse_reply_err(req, 0);
+    }
     unref_inode_lolocked(lo, inode, 1);
     lo_inode_put(lo, &inode);
 }
@@ -1245,8 +1384,18 @@ static void lo_rename(fuse_req_t req, fuse_ino_t parent, const char *name,
     }
 
     res = renameat(parent_inode->fd, name, newparent_inode->fd, newname);
+    if (res == -1) {
+        fuse_reply_err(req, errno);
+    } else {
+        update_version(lo, oldinode);
+        if (newinode) {
+            update_version(lo, newinode);
+        }
+        update_version(lo, parent_inode);
+        update_version(lo, newparent_inode);
+        fuse_reply_err(req, 0);
+    }
 
-    fuse_reply_err(req, res == -1 ? errno : 0);
 out:
     unref_inode_lolocked(lo, oldinode, 1);
     unref_inode_lolocked(lo, newinode, 1);
@@ -1274,8 +1423,21 @@ static void lo_unlink(fuse_req_t req, fuse_ino_t parent, const char *name)
     }
 
     res = unlinkat(lo_fd(req, parent), name, 0);
+    if (res == -1) {
+        fuse_reply_err(req, errno);
+    } else {
+        struct lo_inode *parent_inode;
 
-    fuse_reply_err(req, res == -1 ? errno : 0);
+        update_version(lo, inode);
+
+        parent_inode = lo_inode(req, parent);
+        if (parent_inode) {
+            update_version(lo, parent_inode);
+            lo_inode_put(lo, &parent_inode);
+        }
+
+        fuse_reply_err(req, 0);
+    }
     unref_inode_lolocked(lo, inode, 1);
     lo_inode_put(lo, &inode);
 }
@@ -1690,6 +1852,8 @@ static void lo_create(fuse_req_t req, fuse_ino_t parent, const char *name,
     if (!err) {
         ssize_t fh;
 
+        update_version(lo, parent_inode);
+
         pthread_mutex_lock(&lo->mutex);
         fh = lo_add_fd_mapping(req, fd);
         pthread_mutex_unlock(&lo->mutex);
@@ -1714,7 +1878,7 @@ out:
     if (err) {
         fuse_reply_err(req, err);
     } else {
-        fuse_reply_create(req, &e, fi);
+        fuse_reply_create(req, &e, fi, lo->shared);
     }
 }
 
@@ -2041,6 +2205,7 @@ static void lo_write_buf(fuse_req_t req, fuse_ino_t ino,
     (void)ino;
     ssize_t res;
     struct fuse_bufvec out_buf = FUSE_BUFVEC_INIT(fuse_buf_size(in_buf));
+    struct lo_data *lo = lo_data(req);
     bool cap_fsetid_dropped = false;
 
     out_buf.buf[0].flags = FUSE_BUF_IS_FD | FUSE_BUF_FD_SEEK;
@@ -2067,6 +2232,14 @@ static void lo_write_buf(fuse_req_t req, fuse_ino_t ino,
     if (res < 0) {
         fuse_reply_err(req, -res);
     } else {
+        struct lo_inode *inode;
+
+        inode = lo_inode(req, ino);
+        if (inode) {
+            update_version(lo, inode);
+            lo_inode_put(lo, &inode);
+        }
+
         fuse_reply_write(req, (size_t)res);
     }
 
@@ -2095,6 +2268,7 @@ static void lo_fallocate(fuse_req_t req, fuse_ino_t ino, int mode, off_t offset,
                          off_t length, struct fuse_file_info *fi)
 {
     int err = EOPNOTSUPP;
+    struct lo_data *lo = lo_data(req);
     (void)ino;
 
 #ifdef CONFIG_FALLOCATE
@@ -2112,6 +2286,16 @@ static void lo_fallocate(fuse_req_t req, fuse_ino_t ino, int mode, off_t offset,
     err = posix_fallocate(lo_fi_fd(req, fi), offset, length);
 #endif
 
+    if (!err) {
+        struct lo_inode *inode;
+
+        inode = lo_inode(req, ino);
+        if (inode) {
+            update_version(lo, inode);
+            lo_inode_put(lo, &inode);
+        }
+    }
+
     fuse_reply_err(req, err);
 }
 
@@ -2754,6 +2938,9 @@ static void lo_setxattr(fuse_req_t req, fuse_ino_t ino, const char *in_name,
 
     saverr = ret == -1 ? errno : 0;
 
+    if (!saverr) {
+        update_version(lo, inode);
+    }
 out:
     if (fd >= 0) {
         close(fd);
@@ -2820,6 +3007,9 @@ static void lo_removexattr(fuse_req_t req, fuse_ino_t ino, const char *in_name)
 
     saverr = ret == -1 ? errno : 0;
 
+    if (!saverr) {
+        update_version(lo, inode);
+    }
 out:
     if (fd >= 0) {
         close(fd);
@@ -3474,6 +3664,101 @@ static void log_func(enum fuse_log_level level, const char *fmt, va_list ap)
     }
 }
 
+static void *ireg_do(void *data)
+{
+    struct lo_data *lo = data;
+    int res;
+    char buf[100];
+    struct srv_msg reply;
+    struct msgreply *rep;
+
+    for (;;) {
+        res = read(lo->ireg_sock, buf, sizeof(buf));
+        if (res <= 0) {
+            if (res == -1) {
+                fuse_log(FUSE_LOG_WARNING, "read(lo->ireg_sock, ...): %m\n");
+            } else {
+                fuse_log(FUSE_LOG_WARNING, "disconnected from ireg\n");
+            }
+            return NULL;
+        }
+        if (res != sizeof(reply)) {
+            fuse_log(FUSE_LOG_WARNING, "bad size message: %i\n", res);
+            continue;
+        }
+
+        memcpy(&reply, buf, sizeof(reply));
+        if (reply.op != SRV_VERSION) {
+            fuse_log(FUSE_LOG_WARNING, "bad reply to IREG_GET: %i\n", reply.op);
+            continue;
+        }
+
+        rep = (struct msgreply *)(uintptr_t)reply.handle;
+        rep->inode->version_offset = reply.version.offset;
+        rep->inode->ireg_refid = reply.version.refid;
+        sem_post(&rep->ready);
+    }
+}
+
+static void setup_shared_versions(struct lo_data *lo)
+{
+    int fd, sock, res;
+    const char *version_path = "/dev/shm/fuse_shared_versions";
+    struct stat stat;
+    struct sockaddr_un name = { .sun_family = AF_UNIX };
+    const char *socket_name = "/tmp/ireg.sock";
+    void *addr;
+
+    lo->ireg_sock = -1;
+    if (!lo->shared) {
+        return;
+    }
+
+    sock = socket(AF_UNIX, SOCK_SEQPACKET, 0);
+    if (sock == -1) {
+        fuse_log(FUSE_LOG_ERR, "socket(AF_UNIX, SOCK_SEQPACKET, 0): %m\n");
+        exit(1);
+    }
+
+    strncpy(name.sun_path, socket_name, sizeof(name.sun_path) - 1);
+
+    res = connect(sock, (const struct sockaddr *)&name,
+                  sizeof(struct sockaddr_un));
+    if (res == -1) {
+        fuse_log(FUSE_LOG_WARNING, "connect to ireg: %m\n");
+        close(sock);
+        lo->ireg_sock = -1;
+        return;
+    }
+
+    lo->ireg_sock = sock;
+
+    fd = open(version_path, O_RDWR);
+    if (sock == -1) {
+        fuse_log(FUSE_LOG_ERR, "open(%s, O_RDWR): %m\n", version_path);
+        exit(1);
+    }
+
+    res = fstat(fd, &stat);
+    if (res == -1) {
+        fuse_log(FUSE_LOG_ERR, "fstat(%i, &stat): %m\n", fd);
+        exit(1);
+    }
+
+    lo->version_table_size = stat.st_size / sizeof(lo->version_table[0]);
+
+    addr = mmap(NULL, stat.st_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+    if (addr == MAP_FAILED) {
+        fuse_log(
+            FUSE_LOG_ERR,
+            "mmap(NULL, %li, PROT_READ | PROT_WRITE, MAP_SHARED, %i, 0): %m\n",
+            stat.st_size, fd);
+        exit(1);
+    }
+
+    lo->version_table = addr;
+}
+
 static void setup_root(struct lo_data *lo, struct lo_inode *root)
 {
     int fd, res;
@@ -3688,6 +3973,7 @@ int main(int argc, char *argv[])
 
     lo.use_statx = true;
 
+    setup_shared_versions(&lo);
     se = fuse_session_new(&args, &lo_oper, sizeof(lo_oper), &lo);
     if (se == NULL) {
         goto err_out1;
@@ -3711,9 +3997,24 @@ int main(int argc, char *argv[])
     setup_sandbox(&lo, se, opts.syslog);
 
     setup_root(&lo, &lo.root);
+
+    if (lo.ireg_sock != -1) {
+        pthread_t ireg_thread;
+
+        ret = pthread_create(&ireg_thread, NULL, ireg_do, &lo);
+        if (ret) {
+            fuse_log(FUSE_LOG_WARNING, "pthread_create: %s\n", strerror(ret));
+            ret = 1;
+            goto err_out4;
+        }
+
+        get_shared(&lo, &lo.root);
+    }
+
     /* Block until ctrl+c or fusermount -u */
     ret = virtio_loop(se);
 
+err_out4:
     fuse_session_unmount(se);
     cleanup_capng();
 err_out3:
-- 
2.25.1

