From a3f692a36307054148e7db640dc7a64158a98250 Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Thu, 30 Aug 2018 14:22:10 -0400
Subject: [PATCH 13/29] DAX: virtiofsd: Make setupmapping work only with inode

Guest might not pass file pointer. In that case using inode info, open
the file again, mmap() and close fd.

Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
With fix from:
Signed-off-by: Fotis Xenakis <foxen@windowslive.com>
---
 tools/virtiofsd/fuse_lowlevel.c  | 13 ++++++++++--
 tools/virtiofsd/passthrough_ll.c | 36 ++++++++++++++++++++++++++++----
 2 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/tools/virtiofsd/fuse_lowlevel.c b/tools/virtiofsd/fuse_lowlevel.c
index 1c3790130a..4cfd4c3547 100644
--- a/tools/virtiofsd/fuse_lowlevel.c
+++ b/tools/virtiofsd/fuse_lowlevel.c
@@ -1897,8 +1897,17 @@ static void do_setupmapping(fuse_req_t req, fuse_ino_t nodeid,
     }
 
     if (req->se->op.setupmapping) {
-        req->se->op.setupmapping(req, nodeid, arg->foffset, arg->len,
-                                 arg->moffset, genflags, &fi);
+        /*
+         * TODO: Add a flag to request which tells if arg->fh is
+         * valid or not.
+         */
+        if (fi.fh == (uint64_t)-1) {
+            req->se->op.setupmapping(req, nodeid, arg->foffset, arg->len,
+                                     arg->moffset, genflags, NULL);
+        } else {
+            req->se->op.setupmapping(req, nodeid, arg->foffset, arg->len,
+                                     arg->moffset, genflags, &fi);
+        }
     } else {
         fuse_reply_err(req, ENOSYS);
     }
diff --git a/tools/virtiofsd/passthrough_ll.c b/tools/virtiofsd/passthrough_ll.c
index 056b395574..ebd5a9b215 100644
--- a/tools/virtiofsd/passthrough_ll.c
+++ b/tools/virtiofsd/passthrough_ll.c
@@ -2895,11 +2895,19 @@ static void lo_setupmapping(fuse_req_t req, fuse_ino_t ino, uint64_t foffset,
                             uint64_t len, uint64_t moffset, uint64_t flags,
                             struct fuse_file_info *fi)
 {
-    int ret = 0;
+    struct lo_data *lo = lo_data(req);
+    int ret = 0, fd, res;
     VhostUserFSSlaveMsg msg = { 0 };
     uint64_t vhu_flags;
+    char *buf;
     bool writable = flags & O_RDWR;
 
+    fuse_log(FUSE_LOG_DEBUG,
+             "lo_setupmapping(ino=%" PRIu64 ", fi=0x%p,"
+             " foffset=%" PRIu64 ", len=%" PRIu64 ", moffset=%" PRIu64
+             ", flags=%" PRIu64 ")\n",
+             ino, (void *)fi, foffset, len, moffset, flags);
+
     vhu_flags = VHOST_USER_FS_FLAG_MAP_R;
     if (writable) {
         vhu_flags |= VHOST_USER_FS_FLAG_MAP_W;
@@ -2910,12 +2918,32 @@ static void lo_setupmapping(fuse_req_t req, fuse_ino_t ino, uint64_t foffset,
     msg.c_offset[0] = moffset;
     msg.flags[0] = vhu_flags;
 
-    if (fuse_virtio_map(req, &msg, lo_fi_fd(req, fi))) {
-        fprintf(stderr, "%s: map over virtio failed (fd=%d)\n", __func__,
-                (int)fi->fh);
+    if (fi) {
+        fd = lo_fi_fd(req, fi);
+    } else {
+        res = asprintf(&buf, "%i", lo_fd(req, ino));
+        if (res == -1) {
+            return (void)fuse_reply_err(req, errno);
+        }
+
+        fd = openat(lo->proc_self_fd, buf, flags);
+        free(buf);
+        if (fd == -1) {
+            return (void)fuse_reply_err(req, errno);
+        }
+    }
+
+    if (fuse_virtio_map(req, &msg, fd)) {
+        fuse_log(FUSE_LOG_ERR,
+                 "%s: map over virtio failed (ino=%" PRId64
+                 "fd=%d moffset=0x%" PRIx64 ")\n",
+                 __func__, ino, fi ? (int)fi->fh : lo_fd(req, ino), moffset);
         ret = EINVAL;
     }
 
+    if (!fi) {
+        close(fd);
+    }
     fuse_reply_err(req, ret);
 }
 
-- 
2.25.1

