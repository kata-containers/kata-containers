//
// Copyright (c) 2017 Intel Corporation
// Copyright (c) 2019-2020 Ant Group
//
// SPDX-License-Identifier: Apache-2.0
//

syntax = "proto3";
option go_package = "github.com/kata-containers/kata-containers/src/runtime/virtcontainers/pkg/agent/protocols/grpc";

package grpc;

// Spec is the base configuration for the container.
message Spec {
	// Version of the Open Container Initiative Runtime Specification with which the bundle complies.
	string Version = 1;

	// Process configures the container process.
	Process Process = 2;

	// Root configures the container's root filesystem.
	Root Root = 3;

	// Hostname configures the container's hostname.
	string Hostname = 4;

	// Mounts configures additional mounts (on top of Root).
	repeated Mount Mounts = 5;

	// Domainname configures the container's domainname.
	string Domainname = 6;

	// Hooks configures callbacks for container lifecycle events.
	Hooks Hooks = 7;

	// Annotations contains arbitrary metadata for the container.
	map<string, string> Annotations = 8;

	// Linux is platform-specific configuration for Linux based containers.
	Linux Linux = 9;

	// Solaris is platform-specific configuration for Solaris based containers.
	Solaris Solaris = 10;

	// Windows is platform-specific configuration for Windows based containers.
	Windows Windows = 11;

	// VM specifies configuration for virtual-machine-based containers.
	VM VM = 12;

	// ZOS is platform-specific configuration for z/OS based containers.
	ZOS ZOS = 13;
}

// Scheduler represents the scheduling attributes for a process. It is based on
// the Linux sched_setattr(2) syscall.
message Scheduler {
	// Policy represents the scheduling policy (e.g., SCHED_FIFO, SCHED_RR, SCHED_OTHER).
	string Policy = 1;

	// Nice is the nice value for the process, which affects its priority.
	int32 Nice = 2;

	// Priority represents the static priority of the process.
	int32 Priority = 3;

	// Flags is an array of scheduling flags.
	repeated string Flags = 4;

	// The following ones are used by the DEADLINE scheduler.

	// Runtime is the amount of time in nanoseconds during which the process
	// is allowed to run in a given period.
	uint64 Runtime = 5;

	// Deadline is the absolute deadline for the process to complete its execution.
	uint64 Deadline = 6;

	// Period is the length of the period in nanoseconds used for determining the process runtime.
	uint64 Period = 7;
}

// Process contains information to start a specific application inside the container.
message Process {
	// Terminal creates an interactive terminal for the container.
	bool Terminal = 1;

	// ConsoleSize specifies the size of the console.
	Box ConsoleSize = 2;

	// User specifies user information for the process.
	User User = 3;

	// Args specifies the binary and arguments for the application to execute.
	repeated string Args = 4;

	// CommandLine specifies the full command line for the application to execute on Windows.
	string CommandLine = 5;

	// Env populates the process environment for the process.
	repeated string Env = 6;

 	// Cwd is the current working directory for the process and must be
	// relative to the container's root.
	string Cwd = 7;

	// Capabilities are Linux capabilities that are kept for the process.
	LinuxCapabilities Capabilities = 8;

	// Rlimits specifies rlimit options to apply to the process.
	repeated POSIXRlimit Rlimits = 9;

	// NoNewPrivileges controls whether additional privileges could be gained by processes in the container.	
	bool NoNewPrivileges = 10;

	// ApparmorProfile specifies the apparmor profile for the container.
	string ApparmorProfile = 11;

	// Specify an oom_score_adj for the container.
	int32 OOMScoreAdj = 12;

	// Scheduler specifies the scheduling attributes for a process
	Scheduler Scheduler = 13;

	// SelinuxLabel specifies the selinux context that the container process is run as.
	string SelinuxLabel = 14;
	
	// IOPriority contains the I/O priority settings for the cgroup.
	LinuxIOPriority IOPriority = 15;
}

// LinuxCapabilities specifies the list of allowed capabilities that are kept for a process.
// http://man7.org/linux/man-pages/man7/capabilities.7.h
message LinuxCapabilities {
	// Bounding is the set of capabilities checked by the kernel.
	repeated string Bounding = 1;

	// Effective is the set of capabilities checked by the kernel.
	repeated string Effective = 2;

	// Inheritable is the capabilities preserved across execve.
	repeated string Inheritable = 3;

	// Permitted is the limiting superset for effective capabilities.
	repeated string Permitted = 4;

	// Ambient is the ambient set of capabilities that are kept.
	repeated string Ambient = 5;
}

// IOPriority represents I/O priority settings for the container's processes within the process group.
message LinuxIOPriority {
	string Class = 1;
	int32 Priority = 2;
}

// Box specifies dimensions of a rectangle. Used for specifying the size of a console.
message Box {
	// Height is the vertical dimension of a box.
	uint32 Height = 1;

	// Width is the horizontal dimension of a box.	
	uint32 Width = 2;
}

// User specifies specific user (and group) information for the container process.
message User {
	// UID is the user id.
	uint32 UID = 1;

	// GID is the group id.
	uint32 GID = 2;

	// Umask is the umask for the init process.
	uint32 Umask = 3;

	// AdditionalGids are additional group ids set for the container's process.
	repeated uint32 AdditionalGids = 4;

	// Username is the user name.
	string Username = 5;
}

// Root contains information about the container's root filesystem on the host.
message Root {
	// Path is the absolute path to the container's root filesystem.
	string Path = 1;

	// Readonly makes the root filesystem for the container readonly before the process is executed.
	bool Readonly = 2;
}

// Mount specifies a mount for a container.
message Mount {
	// Destination is the path inside the container expect when it starts with "tmp:/"
	string Destination = 1;

	// Type specifies the mount kind.
	string Type = 2;

	// Source is the path inside the container expect when it starts with "vm:/dev/" or "tmp:/"
	// the path which starts with "vm:/dev/" refers the guest vm's "/dev",
	// especially, "vm:/dev/hostfs/" refers to the shared filesystem.
	// "tmp:/" is a temporary directory which is used for temporary mounts.
	string Source = 3;

	// Options are fstab style mount options.
	repeated string Options = 4;

	// UID/GID mappings used for changing file owners w/o calling chown, fs should support it.
	// Every mount point could have its own mapping.
	repeated LinuxIDMapping UIDMappings = 5;
	repeated LinuxIDMapping GIDMappings = 6;
}

// Hook specifies a command that is run at a particular event in the lifecycle of a container
message Hook {
	string Path = 1;
	repeated string Args = 2;
	repeated string Env = 3;
	int32 Timeout = 4;
}

// Hooks specifies a command that is run in the container at a particular event in the lifecycle of a container
// Hooks for container setup and teardown
message Hooks {
	// Prestart is Deprecated. Prestart is a list of hooks to be run before the container process is executed.
	// It is called in the Runtime Namespace
	//
	// Deprecated: use [Hooks.CreateRuntime], [Hooks.CreateContainer], and
	// [Hooks.StartContainer] instead, which allow more granular hook control
	// during the create and start phase.
	repeated Hook Prestart = 1;

	// Createruntime is a list of hooks to be run during the creation of runtime(sandbox).
	repeated Hook CreateRuntime = 2;

	// CreateContainer is a list of hooks to be run after VM is started, and before container is created.
	repeated Hook CreateContainer = 3;

	// StartContainer is a list of hooks to be run after container is created, but before it is started.
	repeated Hook StartContainer = 4;

	// Poststart is a list of hooks to be run after the container process is started.
	repeated Hook Poststart = 5;

	// Poststop is a list of hooks to be run after the container process exits.
	repeated Hook Poststop = 6;
}

// Linux contains platform-specific configuration for Linux based containers.
message Linux {
	// UIDMapping specifies user mappings for supporting user namespaces.
	repeated LinuxIDMapping UIDMappings = 1;

	// GIDMapping specifies group mappings for supporting user namespaces.
	repeated LinuxIDMapping GIDMappings = 2;

	// Sysctl are a set of key value pairs that are set for the container on start
	map<string, string> Sysctl = 3;

	// Resources contain cgroup information for handling resource constraints
	// for the container
	LinuxResources Resources = 4;

	// CgroupsPath specifies the path to cgroups that are created and/or joined by the container.
	// The path is expected to be relative to the cgroups mountpoint.
	// If resources are specified, the cgroups at CgroupsPath will be updated based on resources.
	string CgroupsPath = 5;

	// Namespaces contains the namespaces that are created and/or joined by the container
	repeated LinuxNamespace Namespaces = 6;

	// Devices are a list of device nodes that are created for the container
	repeated LinuxDevice Devices = 7;

	// Seccomp specifies the seccomp security settings for the container.
	LinuxSeccomp Seccomp = 8;

	// RootfsPropagation is the rootfs mount propagation mode for the container.
	string RootfsPropagation = 9;

	// MaskedPaths masks over the provided paths inside the container.
	repeated string MaskedPaths = 10;

	// ReadonlyPaths sets the provided paths as RO inside the container.
	repeated string ReadonlyPaths = 11;

	// MountLabel specifies the selinux context for the mounts in the container.
	string MountLabel = 12;

	// IntelRdt contains Intel Resource Director Technology (RDT) information
	// for handling resource constraints (e.g., L3 cache) for the container
	LinuxIntelRdt IntelRdt = 13;

	// Personality contains configuration for the Linux personality syscall
	LinuxPersonality Personality = 14;

	// TimeOffsets specifies the offset for supporting time namespaces.
	map<string, LinuxTimeOffset> TimeOffsets = 15;
}

// LinuxNamespace is the configuration for a Linux namespace
message LinuxNamespace {
	// Type is the type of namespace
	string Type = 1;

	// Path is a path to an existing namespace persisted on disk that can be joined
	// and is of the same type
	string Path = 2;
}

// LinuxIDMapping specifies UID/GID mappings
message LinuxIDMapping {
	// ContainerID is the starting UID/GID in the container
	uint32 ContainerID = 1;

	// HostID is the starting UID/GID on the host to be mapped to 'ContainerID'
	uint32 HostID = 2;

	// Size is the number of IDs to be mapped
	uint32 Size = 3;
}

// LinuxTimeOffset specifies the offset for Time Namespace
message LinuxTimeOffset {
	// Secs is the offset of clock (in secs) in the container
	int64 Secs = 1;
	// Nanosecs is the additional offset for Secs (in nanosecs)
	uint32 Nanosecs = 2;
}

// POSIXRlimit type and restrictions
message POSIXRlimit {
	// Type of the rlimit to set
	string Type = 1;

	// Hard is the hard limit for the specified type
	uint64 Hard = 2;

	// Soft is the soft limit for the specified type
   	uint64 Soft = 3;
}

// LinuxHugepageLimit structure corresponds to limiting kernel hugepages.
// Default to reservation limits if supported. Otherwise fallback to page fault limits.
message LinuxHugepageLimit {
	// Pagesize is the hugepage size
	string Pagesize = 1;

	// Limit is the limit of "hugepagesize" hugetlb usage
	uint64 Limit = 2;
}

// LinuxInterfacePriority for network interfaces
message LinuxInterfacePriority {
	// Name is the name of the network interface
	string Name = 1;

	// Priority for the interface
	uint32 Priority = 2;
}

// LinuxWeightDevice struct holds a `major:minor weight` pair for weightDevice
message LinuxWeightDevice {
	// Major is the device's major number.
	int64 Major = 1;

	// Minor is the device's minor number.
	int64 Minor = 2;

	// Weight is the bandwidth rate for the device.
	uint32 Weight = 3;

	// LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, CFQ scheduler only
	uint32 LeafWeight = 4;
}

// LinuxThrottleDevice struct holds a `major:minor rate_per_second` pair
message LinuxThrottleDevice {
	// Major is the device's major number.
	int64 Major = 1;

	// Minor is the device's minor number.
	int64 Minor = 2;

	// Rate is the IO rate limit per cgroup per device
	uint64 Rate = 3;
}

// LinuxBlockIO for Linux cgroup 'blkio' resource management
message LinuxBlockIO {
	// Specifies per cgroup weight
	uint32 Weight = 1;

	// Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, CFQ scheduler only
	uint32 LeafWeight = 2;

	// Weight per cgroup per device, can override BlkioWeight
	repeated LinuxWeightDevice WeightDevice = 3;

	// IO read rate limit per cgroup per device, bytes per second
	repeated LinuxThrottleDevice ThrottleReadBpsDevice = 4;

	// IO write rate limit per cgroup per device, bytes per second
	repeated LinuxThrottleDevice ThrottleWriteBpsDevice = 5;

	// IO read rate limit per cgroup per device, IO per second
	repeated LinuxThrottleDevice ThrottleReadIOPSDevice = 6;

	// IO write rate limit per cgroup per device, IO per second
	repeated LinuxThrottleDevice ThrottleWriteIOPSDevice = 7;
}

// LinuxMemory for Linux cgroup 'memory' resource management
message LinuxMemory {
	// Memory limit (in bytes).
	int64 Limit = 1;

	// Memory reservation or soft_limit (in bytes).
	int64 Reservation = 2;

	// Total memory limit (memory + swap).
	int64 Swap = 3;

	// Kernel memory limit (in bytes).
	int64 Kernel = 4;

	// Kernel memory limit for tcp (in bytes)
	int64 KernelTCP = 5;

	// How aggressive the kernel will swap memory pages.
	uint64 Swappiness = 6;

	// DisableOOMKiller disables the OOM killer for out of memory conditions
	bool DisableOOMKiller = 7;
	
	// Enables hierarchical memory accounting
	bool UseHierarchy = 8;
	
	// CheckBeforeUpdate enables checking if a new memory limit is lower
	// than the current usage during update, and if so, rejecting the new
	// limit.
	bool CheckBeforeUpdate = 9;
}

// LinuxCPU for Linux cgroup 'cpu' resource management
message LinuxCPU {
	// CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
	uint64 Shares = 1;

	// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
	int64 Quota = 2;

	// CPU hardcap burst limit (in usecs). Allowed accumulated cpu time additionally for burst in a
	// given period.
	uint64 Burst = 3;

	// CPU period to be used for hardcapping (in usecs).
	uint64 Period = 4;

	// How much time realtime scheduling may use (in usecs).
	int64 RealtimeRuntime = 5;

	// CPU period to be used for realtime scheduling (in usecs).
	uint64 RealtimePeriod = 6;

	// CPUs to use within the cpuset. Default is to use any CPU available.
	string Cpus = 7;

	// List of memory nodes in the cpuset. Default is to use any available memory node.
	string Mems = 8;
	
	// cgroups are configured with minimum weight, 0: default behavior, 1: SCHED_IDLE.
	int64 Idle = 9;
}

// LinuxPids for Linux cgroup 'pids' resource management (Linux 4.3)
message LinuxPids {
	// Maximum number of PIDs. Default is "no limit".
	int64 Limit = 1;
}

// LinuxRdma for Linux cgroup 'rdma' resource management (Linux 4.11)
message LinuxNetwork {
	// Set class identifier for container's network packets
	uint32 ClassID = 1;

	// Set priority of network traffic for container
	repeated LinuxInterfacePriority Priorities = 2;
}

// LinuxRdma for Linux cgroup 'rdma' resource management (Linux 4.11)
message LinuxRdma {
	// Maximum number of HCA handles that can be opened. Default is "no limit".
	uint32 HcaHandles = 1;
	// Maximum number of HCA objects that can be created. Default is "no limit".
	uint32 HcaObjects = 2;
}

// LinuxResources has container runtime resource constraints
message LinuxResources {
	// Devices configures the device whitelist.
	repeated LinuxDeviceCgroup Devices = 1;

	// Memory restriction configuration
	LinuxMemory Memory = 2;

	// CPU resource restriction configuration
	LinuxCPU CPU = 3;

	// Task resource restriction configuration.
	LinuxPids Pids = 4;

	// BlockIO restriction configuration
	LinuxBlockIO BlockIO = 5;

	// Hugetlb limit (in bytes)
	repeated LinuxHugepageLimit HugepageLimits = 6;

	// Network restriction configuration
	LinuxNetwork Network = 7;
	
	// Rdma resource restriction configuration.
	// Limits are a set of key value pairs that define RDMA resource limits,
	// where the key is device name and value is resource limits.
	map<string, LinuxRdma> Rdma = 8;

	// Unified resources.
	map<string, string> Unified = 9;
}

// LinuxDevice represents the mknod information for a Linux special device file
message LinuxDevice {
	// Path to the device.
	string Path = 1;

	// Device type, block, char, etc.
	string Type = 2;

	// Major is the device's major number.
	int64 Major = 3;

	// Minor is the device's minor number.
	int64 Minor = 4;

	// FileMode permission bits for the device.
	uint32 FileMode = 5;

	// UID of the device.
	uint32 UID = 6;

	// Gid of the device.
	uint32 GID = 7;
}

// LinuxDeviceCgroup represents a device rule for the devices specified to
// the device controller
message LinuxDeviceCgroup {
	// Allow or deny
	bool Allow = 1;

	// Device type, block, char, etc.
	string Type = 2;

	// Major is the device's major number.
	int64 Major = 3;

	// Minor is the device's minor number.
	int64 Minor = 4;

	// Cgroup access permissions format, rwm.
	string Access = 5;
}

// LinuxPersonality represents the Linux personality syscall input
message LinuxPersonality {
	// Domain for the personality
	string Domain = 1;
	// Additional flags
	repeated string Flags = 2;
}

// LinuxSeccomp represents syscall restrictions
message LinuxSeccomp {
	string DefaultAction = 1;
	uint32 DefaultErrnoRet = 2;
	repeated string Architectures = 3;
	repeated string Flags = 4;
	string ListenerPath = 5;
	string ListenerMetadata = 6;
	repeated LinuxSyscall Syscalls = 7;
}

// LinuxSeccompArg used for matching specific syscall arguments in Seccomp
message LinuxSeccompArg {
	uint32 Index = 1;
	uint64 Value = 2;
	uint64 ValueTwo = 3;
	string Op = 4;
}

// LinuxSyscall is used to match a syscall in Seccomp
message LinuxSyscall {
	repeated string Names = 1;
	string Action = 2;
	oneof ErrnoRet {
		uint32 errnoret = 3;
	}
	repeated LinuxSeccompArg Args = 4;
}

// LinuxIntelRdt has container runtime resource constraints for Intel RDT CAT and MBA
// features and flags enabling Intel RDT CMT and MBM features.
// Intel RDT features are available in Linux 4.14 and newer kernel versions.
message LinuxIntelRdt {
	// The identity for RDT Class of Service
	string ClosID = 1;
	
	// The schema for L3 cache id and capacity bitmask (CBM)
	// Format: "L3:<cache_id0>=<cbm0>;<cache_id1>=<cbm1>;..."
	string L3CacheSchema = 2;

	// The schema of memory bandwidth per L3 cache id
	// Format: "MB:<cache_id0>=bandwidth0;<cache_id1>=bandwidth1;..."
	// The unit of memory bandwidth is specified in "percentages" by
	// default, and in "MBps" if MBA Software Controller is enabled.
	string MemBwSchema = 3;

	// EnableCMT is the flag to indicate if the Intel RDT CMT is enabled. CMT (Cache Monitoring Technology) supports monitoring of
	// the last-level cache (LLC) occupancy for the container.
	bool EnableCMT = 4;

	// EnableMBM is the flag to indicate if the Intel RDT MBM is enabled. MBM (Memory Bandwidth Monitoring) supports monitoring of
	// total and local memory bandwidth for the container.
	bool EnableMBM = 5;
}

message Windows {
	// Dummy string, never used.
	string dummy = 1;
}

message Solaris {
	// Dummy string, never used.
	string dummy = 1;
}

message VM {
	// Dummy string, never used.
	string dummy = 1;
}

message ZOS {
	// Dummy string, never used.
	string dummy = 1;
}