//
// Copyright (c) 2017 Intel Corporation
// Copyright (c) 2019-2020 Ant Group
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: oci.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the Open Container Initiative Runtime Specification with which the bundle complies.
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	// Process configures the container process.
	Process *Process `protobuf:"bytes,2,opt,name=Process,proto3" json:"Process,omitempty"`
	// Root configures the container's root filesystem.
	Root *Root `protobuf:"bytes,3,opt,name=Root,proto3" json:"Root,omitempty"`
	// Hostname configures the container's hostname.
	Hostname string `protobuf:"bytes,4,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	// Mounts configures additional mounts (on top of Root).
	Mounts []*Mount `protobuf:"bytes,5,rep,name=Mounts,proto3" json:"Mounts,omitempty"`
	// Hooks configures callbacks for container lifecycle events.
	Hooks *Hooks `protobuf:"bytes,6,opt,name=Hooks,proto3" json:"Hooks,omitempty"`
	// Annotations contains arbitrary metadata for the container.
	Annotations map[string]string `protobuf:"bytes,7,rep,name=Annotations,proto3" json:"Annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Linux is platform-specific configuration for Linux based containers.
	Linux *Linux `protobuf:"bytes,8,opt,name=Linux,proto3" json:"Linux,omitempty"`
	// Solaris is platform-specific configuration for Solaris based containers.
	Solaris *Solaris `protobuf:"bytes,9,opt,name=Solaris,proto3" json:"Solaris,omitempty"`
	// Windows is platform-specific configuration for Windows based containers.
	Windows *Windows `protobuf:"bytes,10,opt,name=Windows,proto3" json:"Windows,omitempty"`
}

func (x *Spec) Reset() {
	*x = Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{0}
}

func (x *Spec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Spec) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Spec) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Spec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Spec) GetMounts() []*Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *Spec) GetHooks() *Hooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *Spec) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Spec) GetLinux() *Linux {
	if x != nil {
		return x.Linux
	}
	return nil
}

func (x *Spec) GetSolaris() *Solaris {
	if x != nil {
		return x.Solaris
	}
	return nil
}

func (x *Spec) GetWindows() *Windows {
	if x != nil {
		return x.Windows
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Terminal creates an interactive terminal for the container.
	Terminal bool `protobuf:"varint,1,opt,name=Terminal,proto3" json:"Terminal,omitempty"`
	// ConsoleSize specifies the size of the console.
	ConsoleSize *Box `protobuf:"bytes,2,opt,name=ConsoleSize,proto3" json:"ConsoleSize,omitempty"`
	// User specifies user information for the process.
	User *User `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	// Args specifies the binary and arguments for the application to execute.
	Args []string `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
	// Env populates the process environment for the process.
	Env []string `protobuf:"bytes,5,rep,name=Env,proto3" json:"Env,omitempty"`
	// Cwd is the current working directory for the process and must be
	// relative to the container's root.
	Cwd string `protobuf:"bytes,6,opt,name=Cwd,proto3" json:"Cwd,omitempty"`
	// Capabilities are Linux capabilities that are kept for the process.
	Capabilities *LinuxCapabilities `protobuf:"bytes,7,opt,name=Capabilities,proto3" json:"Capabilities,omitempty"`
	// Rlimits specifies rlimit options to apply to the process.
	Rlimits []*POSIXRlimit `protobuf:"bytes,8,rep,name=Rlimits,proto3" json:"Rlimits,omitempty"`
	// NoNewPrivileges controls whether additional privileges could be gained by processes in the container.
	NoNewPrivileges bool `protobuf:"varint,9,opt,name=NoNewPrivileges,proto3" json:"NoNewPrivileges,omitempty"`
	// ApparmorProfile specifies the apparmor profile for the container.
	ApparmorProfile string `protobuf:"bytes,10,opt,name=ApparmorProfile,proto3" json:"ApparmorProfile,omitempty"`
	// Specify an oom_score_adj for the container.
	OOMScoreAdj int64 `protobuf:"varint,11,opt,name=OOMScoreAdj,proto3" json:"OOMScoreAdj,omitempty"`
	// SelinuxLabel specifies the selinux context that the container process is run as.
	SelinuxLabel string `protobuf:"bytes,12,opt,name=SelinuxLabel,proto3" json:"SelinuxLabel,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{1}
}

func (x *Process) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (x *Process) GetConsoleSize() *Box {
	if x != nil {
		return x.ConsoleSize
	}
	return nil
}

func (x *Process) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Process) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Process) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Process) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Process) GetCapabilities() *LinuxCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Process) GetRlimits() []*POSIXRlimit {
	if x != nil {
		return x.Rlimits
	}
	return nil
}

func (x *Process) GetNoNewPrivileges() bool {
	if x != nil {
		return x.NoNewPrivileges
	}
	return false
}

func (x *Process) GetApparmorProfile() string {
	if x != nil {
		return x.ApparmorProfile
	}
	return ""
}

func (x *Process) GetOOMScoreAdj() int64 {
	if x != nil {
		return x.OOMScoreAdj
	}
	return 0
}

func (x *Process) GetSelinuxLabel() string {
	if x != nil {
		return x.SelinuxLabel
	}
	return ""
}

type Box struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Height is the vertical dimension of a box.
	Height uint32 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	// Width is the horizontal dimension of a box.
	Width uint32 `protobuf:"varint,2,opt,name=Width,proto3" json:"Width,omitempty"`
}

func (x *Box) Reset() {
	*x = Box{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box) ProtoMessage() {}

func (x *Box) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box.ProtoReflect.Descriptor instead.
func (*Box) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{2}
}

func (x *Box) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Box) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID is the user id.
	UID uint32 `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	// GID is the group id.
	GID uint32 `protobuf:"varint,2,opt,name=GID,proto3" json:"GID,omitempty"`
	// AdditionalGids are additional group ids set for the container's process.
	AdditionalGids []uint32 `protobuf:"varint,3,rep,packed,name=AdditionalGids,proto3" json:"AdditionalGids,omitempty"`
	// Username is the user name.
	Username string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *User) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *User) GetAdditionalGids() []uint32 {
	if x != nil {
		return x.AdditionalGids
	}
	return nil
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type LinuxCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bounding is the set of capabilities checked by the kernel.
	Bounding []string `protobuf:"bytes,1,rep,name=Bounding,proto3" json:"Bounding,omitempty"`
	// Effective is the set of capabilities checked by the kernel.
	Effective []string `protobuf:"bytes,2,rep,name=Effective,proto3" json:"Effective,omitempty"`
	// Inheritable is the capabilities preserved across execve.
	Inheritable []string `protobuf:"bytes,3,rep,name=Inheritable,proto3" json:"Inheritable,omitempty"`
	// Permitted is the limiting superset for effective capabilities.
	Permitted []string `protobuf:"bytes,4,rep,name=Permitted,proto3" json:"Permitted,omitempty"`
	// Ambient is the ambient set of capabilities that are kept.
	Ambient []string `protobuf:"bytes,5,rep,name=Ambient,proto3" json:"Ambient,omitempty"`
}

func (x *LinuxCapabilities) Reset() {
	*x = LinuxCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxCapabilities) ProtoMessage() {}

func (x *LinuxCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxCapabilities.ProtoReflect.Descriptor instead.
func (*LinuxCapabilities) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{4}
}

func (x *LinuxCapabilities) GetBounding() []string {
	if x != nil {
		return x.Bounding
	}
	return nil
}

func (x *LinuxCapabilities) GetEffective() []string {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *LinuxCapabilities) GetInheritable() []string {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

func (x *LinuxCapabilities) GetPermitted() []string {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *LinuxCapabilities) GetAmbient() []string {
	if x != nil {
		return x.Ambient
	}
	return nil
}

type POSIXRlimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the rlimit to set
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Hard is the hard limit for the specified type
	Hard uint64 `protobuf:"varint,2,opt,name=Hard,proto3" json:"Hard,omitempty"`
	// Soft is the soft limit for the specified type
	Soft uint64 `protobuf:"varint,3,opt,name=Soft,proto3" json:"Soft,omitempty"`
}

func (x *POSIXRlimit) Reset() {
	*x = POSIXRlimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POSIXRlimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POSIXRlimit) ProtoMessage() {}

func (x *POSIXRlimit) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POSIXRlimit.ProtoReflect.Descriptor instead.
func (*POSIXRlimit) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{5}
}

func (x *POSIXRlimit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *POSIXRlimit) GetHard() uint64 {
	if x != nil {
		return x.Hard
	}
	return 0
}

func (x *POSIXRlimit) GetSoft() uint64 {
	if x != nil {
		return x.Soft
	}
	return 0
}

type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// destination is the path inside the container expect when it starts with "tmp:/"
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// source is the path inside the container expect when it starts with "vm:/dev/" or "tmp:/"
	// the path which starts with "vm:/dev/" refers the guest vm's "/dev",
	// especially, "vm:/dev/hostfs/" refers to the shared filesystem.
	// "tmp:/" is a temporary directory which is used for temporary mounts.
	Source  string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Options []string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{6}
}

func (x *Mount) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Mount) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Mount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Mount) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path is the absolute path to the container's root filesystem.
	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	// Readonly makes the root filesystem for the container readonly before the process is executed.
	Readonly bool `protobuf:"varint,2,opt,name=Readonly,proto3" json:"Readonly,omitempty"`
}

func (x *Root) Reset() {
	*x = Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{7}
}

func (x *Root) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Root) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

type Hooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prestart is a list of hooks to be run before the container process is executed.
	Prestart []*Hook `protobuf:"bytes,1,rep,name=Prestart,proto3" json:"Prestart,omitempty"`
	// Poststart is a list of hooks to be run after the container process is started.
	Poststart []*Hook `protobuf:"bytes,2,rep,name=Poststart,proto3" json:"Poststart,omitempty"`
	// Poststop is a list of hooks to be run after the container process exits.
	Poststop []*Hook `protobuf:"bytes,3,rep,name=Poststop,proto3" json:"Poststop,omitempty"`
	// Createruntime is a list of hooks to be run during the creation of runtime(sandbox).
	CreateRuntime []*Hook `protobuf:"bytes,4,rep,name=CreateRuntime,proto3" json:"CreateRuntime,omitempty"`
	// CreateContainer is a list of hooks to be run after VM is started, and before container is created.
	CreateContainer []*Hook `protobuf:"bytes,5,rep,name=CreateContainer,proto3" json:"CreateContainer,omitempty"`
	// StartContainer is a list of hooks to be run after container is created, but before it is started.
	StartContainer []*Hook `protobuf:"bytes,6,rep,name=StartContainer,proto3" json:"StartContainer,omitempty"`
}

func (x *Hooks) Reset() {
	*x = Hooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hooks) ProtoMessage() {}

func (x *Hooks) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hooks.ProtoReflect.Descriptor instead.
func (*Hooks) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{8}
}

func (x *Hooks) GetPrestart() []*Hook {
	if x != nil {
		return x.Prestart
	}
	return nil
}

func (x *Hooks) GetPoststart() []*Hook {
	if x != nil {
		return x.Poststart
	}
	return nil
}

func (x *Hooks) GetPoststop() []*Hook {
	if x != nil {
		return x.Poststop
	}
	return nil
}

func (x *Hooks) GetCreateRuntime() []*Hook {
	if x != nil {
		return x.CreateRuntime
	}
	return nil
}

func (x *Hooks) GetCreateContainer() []*Hook {
	if x != nil {
		return x.CreateContainer
	}
	return nil
}

func (x *Hooks) GetStartContainer() []*Hook {
	if x != nil {
		return x.StartContainer
	}
	return nil
}

type Hook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty"`
	Env     []string `protobuf:"bytes,3,rep,name=Env,proto3" json:"Env,omitempty"`
	Timeout int64    `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
}

func (x *Hook) Reset() {
	*x = Hook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hook) ProtoMessage() {}

func (x *Hook) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hook.ProtoReflect.Descriptor instead.
func (*Hook) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{9}
}

func (x *Hook) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Hook) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Hook) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Hook) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type Linux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UIDMapping specifies user mappings for supporting user namespaces.
	UIDMappings []*LinuxIDMapping `protobuf:"bytes,1,rep,name=UIDMappings,proto3" json:"UIDMappings,omitempty"`
	// GIDMapping specifies group mappings for supporting user namespaces.
	GIDMappings []*LinuxIDMapping `protobuf:"bytes,2,rep,name=GIDMappings,proto3" json:"GIDMappings,omitempty"`
	// Sysctl are a set of key value pairs that are set for the container on start
	Sysctl map[string]string `protobuf:"bytes,3,rep,name=Sysctl,proto3" json:"Sysctl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Resources contain cgroup information for handling resource constraints
	// for the container
	Resources *LinuxResources `protobuf:"bytes,4,opt,name=Resources,proto3" json:"Resources,omitempty"`
	// CgroupsPath specifies the path to cgroups that are created and/or joined by the container.
	// The path is expected to be relative to the cgroups mountpoint.
	// If resources are specified, the cgroups at CgroupsPath will be updated based on resources.
	CgroupsPath string `protobuf:"bytes,5,opt,name=CgroupsPath,proto3" json:"CgroupsPath,omitempty"`
	// Namespaces contains the namespaces that are created and/or joined by the container
	Namespaces []*LinuxNamespace `protobuf:"bytes,6,rep,name=Namespaces,proto3" json:"Namespaces,omitempty"`
	// Devices are a list of device nodes that are created for the container
	Devices []*LinuxDevice `protobuf:"bytes,7,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Seccomp specifies the seccomp security settings for the container.
	Seccomp *LinuxSeccomp `protobuf:"bytes,8,opt,name=Seccomp,proto3" json:"Seccomp,omitempty"`
	// RootfsPropagation is the rootfs mount propagation mode for the container.
	RootfsPropagation string `protobuf:"bytes,9,opt,name=RootfsPropagation,proto3" json:"RootfsPropagation,omitempty"`
	// MaskedPaths masks over the provided paths inside the container.
	MaskedPaths []string `protobuf:"bytes,10,rep,name=MaskedPaths,proto3" json:"MaskedPaths,omitempty"`
	// ReadonlyPaths sets the provided paths as RO inside the container.
	ReadonlyPaths []string `protobuf:"bytes,11,rep,name=ReadonlyPaths,proto3" json:"ReadonlyPaths,omitempty"`
	// MountLabel specifies the selinux context for the mounts in the container.
	MountLabel string `protobuf:"bytes,12,opt,name=MountLabel,proto3" json:"MountLabel,omitempty"`
	// IntelRdt contains Intel Resource Director Technology (RDT) information
	// for handling resource constraints (e.g., L3 cache) for the container
	IntelRdt *LinuxIntelRdt `protobuf:"bytes,13,opt,name=IntelRdt,proto3" json:"IntelRdt,omitempty"`
}

func (x *Linux) Reset() {
	*x = Linux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Linux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linux) ProtoMessage() {}

func (x *Linux) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linux.ProtoReflect.Descriptor instead.
func (*Linux) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{10}
}

func (x *Linux) GetUIDMappings() []*LinuxIDMapping {
	if x != nil {
		return x.UIDMappings
	}
	return nil
}

func (x *Linux) GetGIDMappings() []*LinuxIDMapping {
	if x != nil {
		return x.GIDMappings
	}
	return nil
}

func (x *Linux) GetSysctl() map[string]string {
	if x != nil {
		return x.Sysctl
	}
	return nil
}

func (x *Linux) GetResources() *LinuxResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Linux) GetCgroupsPath() string {
	if x != nil {
		return x.CgroupsPath
	}
	return ""
}

func (x *Linux) GetNamespaces() []*LinuxNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Linux) GetDevices() []*LinuxDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Linux) GetSeccomp() *LinuxSeccomp {
	if x != nil {
		return x.Seccomp
	}
	return nil
}

func (x *Linux) GetRootfsPropagation() string {
	if x != nil {
		return x.RootfsPropagation
	}
	return ""
}

func (x *Linux) GetMaskedPaths() []string {
	if x != nil {
		return x.MaskedPaths
	}
	return nil
}

func (x *Linux) GetReadonlyPaths() []string {
	if x != nil {
		return x.ReadonlyPaths
	}
	return nil
}

func (x *Linux) GetMountLabel() string {
	if x != nil {
		return x.MountLabel
	}
	return ""
}

func (x *Linux) GetIntelRdt() *LinuxIntelRdt {
	if x != nil {
		return x.IntelRdt
	}
	return nil
}

type Windows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dummy string, never used.
	Dummy string `protobuf:"bytes,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Windows) Reset() {
	*x = Windows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Windows) ProtoMessage() {}

func (x *Windows) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Windows.ProtoReflect.Descriptor instead.
func (*Windows) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{11}
}

func (x *Windows) GetDummy() string {
	if x != nil {
		return x.Dummy
	}
	return ""
}

type Solaris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dummy string, never used.
	Dummy string `protobuf:"bytes,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Solaris) Reset() {
	*x = Solaris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solaris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solaris) ProtoMessage() {}

func (x *Solaris) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solaris.ProtoReflect.Descriptor instead.
func (*Solaris) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{12}
}

func (x *Solaris) GetDummy() string {
	if x != nil {
		return x.Dummy
	}
	return ""
}

type LinuxIDMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HostID is the starting UID/GID on the host to be mapped to 'ContainerID'
	HostID uint32 `protobuf:"varint,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	// ContainerID is the starting UID/GID in the container
	ContainerID uint32 `protobuf:"varint,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	// Size is the number of IDs to be mapped
	Size uint32 `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *LinuxIDMapping) Reset() {
	*x = LinuxIDMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxIDMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxIDMapping) ProtoMessage() {}

func (x *LinuxIDMapping) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxIDMapping.ProtoReflect.Descriptor instead.
func (*LinuxIDMapping) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{13}
}

func (x *LinuxIDMapping) GetHostID() uint32 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *LinuxIDMapping) GetContainerID() uint32 {
	if x != nil {
		return x.ContainerID
	}
	return 0
}

func (x *LinuxIDMapping) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LinuxNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of namespace
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Path is a path to an existing namespace persisted on disk that can be joined
	// and is of the same type
	Path string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *LinuxNamespace) Reset() {
	*x = LinuxNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxNamespace) ProtoMessage() {}

func (x *LinuxNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxNamespace.ProtoReflect.Descriptor instead.
func (*LinuxNamespace) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{14}
}

func (x *LinuxNamespace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LinuxNamespace) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type LinuxDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the device.
	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	// Device type, block, char, etc.
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,3,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,4,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// FileMode permission bits for the device.
	FileMode uint32 `protobuf:"varint,5,opt,name=FileMode,proto3" json:"FileMode,omitempty"`
	// UID of the device.
	UID uint32 `protobuf:"varint,6,opt,name=UID,proto3" json:"UID,omitempty"`
	// Gid of the device.
	GID uint32 `protobuf:"varint,7,opt,name=GID,proto3" json:"GID,omitempty"`
}

func (x *LinuxDevice) Reset() {
	*x = LinuxDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxDevice) ProtoMessage() {}

func (x *LinuxDevice) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxDevice.ProtoReflect.Descriptor instead.
func (*LinuxDevice) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{15}
}

func (x *LinuxDevice) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LinuxDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LinuxDevice) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxDevice) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxDevice) GetFileMode() uint32 {
	if x != nil {
		return x.FileMode
	}
	return 0
}

func (x *LinuxDevice) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *LinuxDevice) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

type LinuxResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices configures the device whitelist.
	Devices []*LinuxDeviceCgroup `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Memory restriction configuration
	Memory *LinuxMemory `protobuf:"bytes,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	// CPU resource restriction configuration
	CPU *LinuxCPU `protobuf:"bytes,3,opt,name=CPU,proto3" json:"CPU,omitempty"`
	// Task resource restriction configuration.
	Pids *LinuxPids `protobuf:"bytes,4,opt,name=Pids,proto3" json:"Pids,omitempty"`
	// BlockIO restriction configuration
	BlockIO *LinuxBlockIO `protobuf:"bytes,5,opt,name=BlockIO,proto3" json:"BlockIO,omitempty"`
	// Hugetlb limit (in bytes)
	HugepageLimits []*LinuxHugepageLimit `protobuf:"bytes,6,rep,name=HugepageLimits,proto3" json:"HugepageLimits,omitempty"`
	// Network restriction configuration
	Network *LinuxNetwork `protobuf:"bytes,7,opt,name=Network,proto3" json:"Network,omitempty"`
}

func (x *LinuxResources) Reset() {
	*x = LinuxResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxResources) ProtoMessage() {}

func (x *LinuxResources) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxResources.ProtoReflect.Descriptor instead.
func (*LinuxResources) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{16}
}

func (x *LinuxResources) GetDevices() []*LinuxDeviceCgroup {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *LinuxResources) GetMemory() *LinuxMemory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *LinuxResources) GetCPU() *LinuxCPU {
	if x != nil {
		return x.CPU
	}
	return nil
}

func (x *LinuxResources) GetPids() *LinuxPids {
	if x != nil {
		return x.Pids
	}
	return nil
}

func (x *LinuxResources) GetBlockIO() *LinuxBlockIO {
	if x != nil {
		return x.BlockIO
	}
	return nil
}

func (x *LinuxResources) GetHugepageLimits() []*LinuxHugepageLimit {
	if x != nil {
		return x.HugepageLimits
	}
	return nil
}

func (x *LinuxResources) GetNetwork() *LinuxNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type LinuxMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory limit (in bytes).
	Limit int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// Memory reservation or soft_limit (in bytes).
	Reservation int64 `protobuf:"varint,2,opt,name=Reservation,proto3" json:"Reservation,omitempty"`
	// Total memory limit (memory + swap).
	Swap int64 `protobuf:"varint,3,opt,name=Swap,proto3" json:"Swap,omitempty"`
	// Kernel memory limit (in bytes).
	Kernel int64 `protobuf:"varint,4,opt,name=Kernel,proto3" json:"Kernel,omitempty"`
	// Kernel memory limit for tcp (in bytes)
	KernelTCP int64 `protobuf:"varint,5,opt,name=KernelTCP,proto3" json:"KernelTCP,omitempty"`
	// How aggressive the kernel will swap memory pages.
	Swappiness uint64 `protobuf:"varint,6,opt,name=Swappiness,proto3" json:"Swappiness,omitempty"`
	// DisableOOMKiller disables the OOM killer for out of memory conditions
	DisableOOMKiller bool `protobuf:"varint,7,opt,name=DisableOOMKiller,proto3" json:"DisableOOMKiller,omitempty"`
}

func (x *LinuxMemory) Reset() {
	*x = LinuxMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxMemory) ProtoMessage() {}

func (x *LinuxMemory) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxMemory.ProtoReflect.Descriptor instead.
func (*LinuxMemory) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{17}
}

func (x *LinuxMemory) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LinuxMemory) GetReservation() int64 {
	if x != nil {
		return x.Reservation
	}
	return 0
}

func (x *LinuxMemory) GetSwap() int64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *LinuxMemory) GetKernel() int64 {
	if x != nil {
		return x.Kernel
	}
	return 0
}

func (x *LinuxMemory) GetKernelTCP() int64 {
	if x != nil {
		return x.KernelTCP
	}
	return 0
}

func (x *LinuxMemory) GetSwappiness() uint64 {
	if x != nil {
		return x.Swappiness
	}
	return 0
}

func (x *LinuxMemory) GetDisableOOMKiller() bool {
	if x != nil {
		return x.DisableOOMKiller
	}
	return false
}

type LinuxCPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
	Shares uint64 `protobuf:"varint,1,opt,name=Shares,proto3" json:"Shares,omitempty"`
	// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
	Quota int64 `protobuf:"varint,2,opt,name=Quota,proto3" json:"Quota,omitempty"`
	// CPU period to be used for hardcapping (in usecs).
	Period uint64 `protobuf:"varint,3,opt,name=Period,proto3" json:"Period,omitempty"`
	// How much time realtime scheduling may use (in usecs).
	RealtimeRuntime int64 `protobuf:"varint,4,opt,name=RealtimeRuntime,proto3" json:"RealtimeRuntime,omitempty"`
	// CPU period to be used for realtime scheduling (in usecs).
	RealtimePeriod uint64 `protobuf:"varint,5,opt,name=RealtimePeriod,proto3" json:"RealtimePeriod,omitempty"`
	// CPUs to use within the cpuset. Default is to use any CPU available.
	Cpus string `protobuf:"bytes,6,opt,name=Cpus,proto3" json:"Cpus,omitempty"`
	// List of memory nodes in the cpuset. Default is to use any available memory node.
	Mems string `protobuf:"bytes,7,opt,name=Mems,proto3" json:"Mems,omitempty"`
}

func (x *LinuxCPU) Reset() {
	*x = LinuxCPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxCPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxCPU) ProtoMessage() {}

func (x *LinuxCPU) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxCPU.ProtoReflect.Descriptor instead.
func (*LinuxCPU) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{18}
}

func (x *LinuxCPU) GetShares() uint64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *LinuxCPU) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *LinuxCPU) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *LinuxCPU) GetRealtimeRuntime() int64 {
	if x != nil {
		return x.RealtimeRuntime
	}
	return 0
}

func (x *LinuxCPU) GetRealtimePeriod() uint64 {
	if x != nil {
		return x.RealtimePeriod
	}
	return 0
}

func (x *LinuxCPU) GetCpus() string {
	if x != nil {
		return x.Cpus
	}
	return ""
}

func (x *LinuxCPU) GetMems() string {
	if x != nil {
		return x.Mems
	}
	return ""
}

type LinuxWeightDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Major is the device's major number.
	Major int64 `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// Weight is the bandwidth rate for the device.
	Weight uint32 `protobuf:"varint,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, CFQ scheduler only
	LeafWeight uint32 `protobuf:"varint,4,opt,name=LeafWeight,proto3" json:"LeafWeight,omitempty"`
}

func (x *LinuxWeightDevice) Reset() {
	*x = LinuxWeightDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxWeightDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxWeightDevice) ProtoMessage() {}

func (x *LinuxWeightDevice) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxWeightDevice.ProtoReflect.Descriptor instead.
func (*LinuxWeightDevice) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{19}
}

func (x *LinuxWeightDevice) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxWeightDevice) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxWeightDevice) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LinuxWeightDevice) GetLeafWeight() uint32 {
	if x != nil {
		return x.LeafWeight
	}
	return 0
}

type LinuxThrottleDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Major is the device's major number.
	Major int64 `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// Rate is the IO rate limit per cgroup per device
	Rate uint64 `protobuf:"varint,3,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *LinuxThrottleDevice) Reset() {
	*x = LinuxThrottleDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxThrottleDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxThrottleDevice) ProtoMessage() {}

func (x *LinuxThrottleDevice) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxThrottleDevice.ProtoReflect.Descriptor instead.
func (*LinuxThrottleDevice) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{20}
}

func (x *LinuxThrottleDevice) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxThrottleDevice) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxThrottleDevice) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type LinuxBlockIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies per cgroup weight
	Weight uint32 `protobuf:"varint,1,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, CFQ scheduler only
	LeafWeight uint32 `protobuf:"varint,2,opt,name=LeafWeight,proto3" json:"LeafWeight,omitempty"`
	// Weight per cgroup per device, can override BlkioWeight
	WeightDevice []*LinuxWeightDevice `protobuf:"bytes,3,rep,name=WeightDevice,proto3" json:"WeightDevice,omitempty"`
	// IO read rate limit per cgroup per device, bytes per second
	ThrottleReadBpsDevice []*LinuxThrottleDevice `protobuf:"bytes,4,rep,name=ThrottleReadBpsDevice,proto3" json:"ThrottleReadBpsDevice,omitempty"`
	// IO write rate limit per cgroup per device, bytes per second
	ThrottleWriteBpsDevice []*LinuxThrottleDevice `protobuf:"bytes,5,rep,name=ThrottleWriteBpsDevice,proto3" json:"ThrottleWriteBpsDevice,omitempty"`
	// IO read rate limit per cgroup per device, IO per second
	ThrottleReadIOPSDevice []*LinuxThrottleDevice `protobuf:"bytes,6,rep,name=ThrottleReadIOPSDevice,proto3" json:"ThrottleReadIOPSDevice,omitempty"`
	// IO write rate limit per cgroup per device, IO per second
	ThrottleWriteIOPSDevice []*LinuxThrottleDevice `protobuf:"bytes,7,rep,name=ThrottleWriteIOPSDevice,proto3" json:"ThrottleWriteIOPSDevice,omitempty"`
}

func (x *LinuxBlockIO) Reset() {
	*x = LinuxBlockIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxBlockIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxBlockIO) ProtoMessage() {}

func (x *LinuxBlockIO) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxBlockIO.ProtoReflect.Descriptor instead.
func (*LinuxBlockIO) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{21}
}

func (x *LinuxBlockIO) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LinuxBlockIO) GetLeafWeight() uint32 {
	if x != nil {
		return x.LeafWeight
	}
	return 0
}

func (x *LinuxBlockIO) GetWeightDevice() []*LinuxWeightDevice {
	if x != nil {
		return x.WeightDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleReadBpsDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleReadBpsDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleWriteBpsDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleWriteBpsDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleReadIOPSDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleReadIOPSDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleWriteIOPSDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleWriteIOPSDevice
	}
	return nil
}

type LinuxPids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of PIDs. Default is "no limit".
	Limit int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *LinuxPids) Reset() {
	*x = LinuxPids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxPids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxPids) ProtoMessage() {}

func (x *LinuxPids) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxPids.ProtoReflect.Descriptor instead.
func (*LinuxPids) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{22}
}

func (x *LinuxPids) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LinuxDeviceCgroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow or deny
	Allow bool `protobuf:"varint,1,opt,name=Allow,proto3" json:"Allow,omitempty"`
	// Device type, block, char, etc.
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,3,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,4,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// Cgroup access permissions format, rwm.
	Access string `protobuf:"bytes,5,opt,name=Access,proto3" json:"Access,omitempty"`
}

func (x *LinuxDeviceCgroup) Reset() {
	*x = LinuxDeviceCgroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxDeviceCgroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxDeviceCgroup) ProtoMessage() {}

func (x *LinuxDeviceCgroup) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxDeviceCgroup.ProtoReflect.Descriptor instead.
func (*LinuxDeviceCgroup) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{23}
}

func (x *LinuxDeviceCgroup) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *LinuxDeviceCgroup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LinuxDeviceCgroup) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxDeviceCgroup) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxDeviceCgroup) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type LinuxNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set class identifier for container's network packets
	ClassID uint32 `protobuf:"varint,1,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	// Set priority of network traffic for container
	Priorities []*LinuxInterfacePriority `protobuf:"bytes,2,rep,name=Priorities,proto3" json:"Priorities,omitempty"`
}

func (x *LinuxNetwork) Reset() {
	*x = LinuxNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxNetwork) ProtoMessage() {}

func (x *LinuxNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxNetwork.ProtoReflect.Descriptor instead.
func (*LinuxNetwork) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{24}
}

func (x *LinuxNetwork) GetClassID() uint32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *LinuxNetwork) GetPriorities() []*LinuxInterfacePriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type LinuxHugepageLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pagesize is the hugepage size
	Pagesize string `protobuf:"bytes,1,opt,name=Pagesize,proto3" json:"Pagesize,omitempty"`
	// Limit is the limit of "hugepagesize" hugetlb usage
	Limit uint64 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *LinuxHugepageLimit) Reset() {
	*x = LinuxHugepageLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxHugepageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxHugepageLimit) ProtoMessage() {}

func (x *LinuxHugepageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxHugepageLimit.ProtoReflect.Descriptor instead.
func (*LinuxHugepageLimit) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{25}
}

func (x *LinuxHugepageLimit) GetPagesize() string {
	if x != nil {
		return x.Pagesize
	}
	return ""
}

func (x *LinuxHugepageLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LinuxInterfacePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the network interface
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Priority for the interface
	Priority uint32 `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *LinuxInterfacePriority) Reset() {
	*x = LinuxInterfacePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxInterfacePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxInterfacePriority) ProtoMessage() {}

func (x *LinuxInterfacePriority) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxInterfacePriority.ProtoReflect.Descriptor instead.
func (*LinuxInterfacePriority) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{26}
}

func (x *LinuxInterfacePriority) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinuxInterfacePriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type LinuxSeccomp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAction string          `protobuf:"bytes,1,opt,name=DefaultAction,proto3" json:"DefaultAction,omitempty"`
	Architectures []string        `protobuf:"bytes,2,rep,name=Architectures,proto3" json:"Architectures,omitempty"`
	Flags         []string        `protobuf:"bytes,3,rep,name=Flags,proto3" json:"Flags,omitempty"`
	Syscalls      []*LinuxSyscall `protobuf:"bytes,4,rep,name=Syscalls,proto3" json:"Syscalls,omitempty"`
}

func (x *LinuxSeccomp) Reset() {
	*x = LinuxSeccomp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSeccomp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSeccomp) ProtoMessage() {}

func (x *LinuxSeccomp) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSeccomp.ProtoReflect.Descriptor instead.
func (*LinuxSeccomp) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{27}
}

func (x *LinuxSeccomp) GetDefaultAction() string {
	if x != nil {
		return x.DefaultAction
	}
	return ""
}

func (x *LinuxSeccomp) GetArchitectures() []string {
	if x != nil {
		return x.Architectures
	}
	return nil
}

func (x *LinuxSeccomp) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *LinuxSeccomp) GetSyscalls() []*LinuxSyscall {
	if x != nil {
		return x.Syscalls
	}
	return nil
}

type LinuxSeccompArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    uint64 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Value    uint64 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueTwo uint64 `protobuf:"varint,3,opt,name=ValueTwo,proto3" json:"ValueTwo,omitempty"`
	Op       string `protobuf:"bytes,4,opt,name=Op,proto3" json:"Op,omitempty"`
}

func (x *LinuxSeccompArg) Reset() {
	*x = LinuxSeccompArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSeccompArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSeccompArg) ProtoMessage() {}

func (x *LinuxSeccompArg) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSeccompArg.ProtoReflect.Descriptor instead.
func (*LinuxSeccompArg) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{28}
}

func (x *LinuxSeccompArg) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LinuxSeccompArg) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LinuxSeccompArg) GetValueTwo() uint64 {
	if x != nil {
		return x.ValueTwo
	}
	return 0
}

func (x *LinuxSeccompArg) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type LinuxSyscall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []string `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty"`
	Action string   `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	// Types that are assignable to ErrnoRet:
	//
	//	*LinuxSyscall_Errnoret
	ErrnoRet isLinuxSyscall_ErrnoRet `protobuf_oneof:"ErrnoRet"`
	Args     []*LinuxSeccompArg      `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
}

func (x *LinuxSyscall) Reset() {
	*x = LinuxSyscall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSyscall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSyscall) ProtoMessage() {}

func (x *LinuxSyscall) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSyscall.ProtoReflect.Descriptor instead.
func (*LinuxSyscall) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{29}
}

func (x *LinuxSyscall) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *LinuxSyscall) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (m *LinuxSyscall) GetErrnoRet() isLinuxSyscall_ErrnoRet {
	if m != nil {
		return m.ErrnoRet
	}
	return nil
}

func (x *LinuxSyscall) GetErrnoret() uint32 {
	if x, ok := x.GetErrnoRet().(*LinuxSyscall_Errnoret); ok {
		return x.Errnoret
	}
	return 0
}

func (x *LinuxSyscall) GetArgs() []*LinuxSeccompArg {
	if x != nil {
		return x.Args
	}
	return nil
}

type isLinuxSyscall_ErrnoRet interface {
	isLinuxSyscall_ErrnoRet()
}

type LinuxSyscall_Errnoret struct {
	Errnoret uint32 `protobuf:"varint,3,opt,name=errnoret,proto3,oneof"`
}

func (*LinuxSyscall_Errnoret) isLinuxSyscall_ErrnoRet() {}

type LinuxIntelRdt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schema for L3 cache id and capacity bitmask (CBM)
	// Format: "L3:<cache_id0>=<cbm0>;<cache_id1>=<cbm1>;..."
	L3CacheSchema string `protobuf:"bytes,1,opt,name=L3CacheSchema,proto3" json:"L3CacheSchema,omitempty"`
}

func (x *LinuxIntelRdt) Reset() {
	*x = LinuxIntelRdt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oci_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxIntelRdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxIntelRdt) ProtoMessage() {}

func (x *LinuxIntelRdt) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxIntelRdt.ProtoReflect.Descriptor instead.
func (*LinuxIntelRdt) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{30}
}

func (x *LinuxIntelRdt) GetL3CacheSchema() string {
	if x != nil {
		return x.L3CacheSchema
	}
	return ""
}

var File_oci_proto protoreflect.FileDescriptor

var file_oci_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x72, 0x70,
	0x63, 0x22, 0xc1, 0x03, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x05, 0x48, 0x6f, 0x6f, 0x6b,
	0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x52, 0x05, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x12, 0x27, 0x0a, 0x07, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x72, 0x69, 0x73, 0x52, 0x07, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x52, 0x07, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x78, 0x52, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x77, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43,
	0x77, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x07, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x52, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x07, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x41, 0x70, 0x70, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x4f, 0x4d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f, 0x4f, 0x4d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41,
	0x64, 0x6a, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x33, 0x0a, 0x03, 0x42, 0x6f, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x6e, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x47, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x69, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x41, 0x6d,
	0x62, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x52, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x48, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6f, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6f, 0x66, 0x74,
	0x22, 0x6f, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x36, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x05, 0x48, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x6f,
	0x6b, 0x52, 0x08, 0x50, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x50,
	0x6f, 0x73, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x30, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x04, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x76,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x91, 0x05, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12,
	0x36, 0x0a, 0x0b, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75,
	0x78, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x55, 0x49, 0x44, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x49, 0x44, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x47, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x53, 0x79, 0x73,
	0x63, 0x74, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c,
	0x12, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x53, 0x65, 0x63,
	0x63, 0x6f, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x07,
	0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x74, 0x66,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x52, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x73, 0x6b,
	0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x52, 0x64, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x74, 0x65,
	0x6c, 0x52, 0x64, 0x74, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x52, 0x64, 0x74, 0x1a, 0x39,
	0x0a, 0x0b, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x07, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x1f, 0x0a, 0x07, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x5e, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47, 0x49, 0x44, 0x22, 0xd3, 0x02, 0x0a, 0x0e, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x43, 0x50,
	0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x43, 0x50, 0x55, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x23, 0x0a, 0x04,
	0x50, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x50, 0x69, 0x64, 0x73, 0x52, 0x04, 0x50, 0x69, 0x64,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x4f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x4f, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x4f, 0x12,
	0x40, 0x0a, 0x0e, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x0e, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22,
	0xdb, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x54, 0x43, 0x50,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x54, 0x43,
	0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x4f, 0x4d, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x4f, 0x4d, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0xca, 0x01,
	0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x70, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x70, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x73, 0x22, 0x77, 0x0a, 0x11, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x0c, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4f, 0x0a, 0x15, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x70, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x15, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x42, 0x70, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x16, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x70, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x16, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x70, 0x73, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x50, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75,
	0x78, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x16, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x50,
	0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x50, 0x53, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x4f, 0x50, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x09,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x50, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x66, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x3c, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x12, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x48, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa0, 0x01,
	0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x22, 0x69, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70,
	0x41, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x4f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x70, 0x22, 0x91, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6e, 0x6f, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6e, 0x6f, 0x72, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x52, 0x04, 0x41,
	0x72, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6e, 0x6f, 0x52, 0x65, 0x74, 0x22,
	0x35, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x52, 0x64, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x33, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x33, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x60, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x74, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x2f, 0x6b, 0x61, 0x74, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_oci_proto_rawDescOnce sync.Once
	file_oci_proto_rawDescData = file_oci_proto_rawDesc
)

func file_oci_proto_rawDescGZIP() []byte {
	file_oci_proto_rawDescOnce.Do(func() {
		file_oci_proto_rawDescData = protoimpl.X.CompressGZIP(file_oci_proto_rawDescData)
	})
	return file_oci_proto_rawDescData
}

var file_oci_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_oci_proto_goTypes = []interface{}{
	(*Spec)(nil),                   // 0: grpc.Spec
	(*Process)(nil),                // 1: grpc.Process
	(*Box)(nil),                    // 2: grpc.Box
	(*User)(nil),                   // 3: grpc.User
	(*LinuxCapabilities)(nil),      // 4: grpc.LinuxCapabilities
	(*POSIXRlimit)(nil),            // 5: grpc.POSIXRlimit
	(*Mount)(nil),                  // 6: grpc.Mount
	(*Root)(nil),                   // 7: grpc.Root
	(*Hooks)(nil),                  // 8: grpc.Hooks
	(*Hook)(nil),                   // 9: grpc.Hook
	(*Linux)(nil),                  // 10: grpc.Linux
	(*Windows)(nil),                // 11: grpc.Windows
	(*Solaris)(nil),                // 12: grpc.Solaris
	(*LinuxIDMapping)(nil),         // 13: grpc.LinuxIDMapping
	(*LinuxNamespace)(nil),         // 14: grpc.LinuxNamespace
	(*LinuxDevice)(nil),            // 15: grpc.LinuxDevice
	(*LinuxResources)(nil),         // 16: grpc.LinuxResources
	(*LinuxMemory)(nil),            // 17: grpc.LinuxMemory
	(*LinuxCPU)(nil),               // 18: grpc.LinuxCPU
	(*LinuxWeightDevice)(nil),      // 19: grpc.LinuxWeightDevice
	(*LinuxThrottleDevice)(nil),    // 20: grpc.LinuxThrottleDevice
	(*LinuxBlockIO)(nil),           // 21: grpc.LinuxBlockIO
	(*LinuxPids)(nil),              // 22: grpc.LinuxPids
	(*LinuxDeviceCgroup)(nil),      // 23: grpc.LinuxDeviceCgroup
	(*LinuxNetwork)(nil),           // 24: grpc.LinuxNetwork
	(*LinuxHugepageLimit)(nil),     // 25: grpc.LinuxHugepageLimit
	(*LinuxInterfacePriority)(nil), // 26: grpc.LinuxInterfacePriority
	(*LinuxSeccomp)(nil),           // 27: grpc.LinuxSeccomp
	(*LinuxSeccompArg)(nil),        // 28: grpc.LinuxSeccompArg
	(*LinuxSyscall)(nil),           // 29: grpc.LinuxSyscall
	(*LinuxIntelRdt)(nil),          // 30: grpc.LinuxIntelRdt
	nil,                            // 31: grpc.Spec.AnnotationsEntry
	nil,                            // 32: grpc.Linux.SysctlEntry
}
var file_oci_proto_depIdxs = []int32{
	1,  // 0: grpc.Spec.Process:type_name -> grpc.Process
	7,  // 1: grpc.Spec.Root:type_name -> grpc.Root
	6,  // 2: grpc.Spec.Mounts:type_name -> grpc.Mount
	8,  // 3: grpc.Spec.Hooks:type_name -> grpc.Hooks
	31, // 4: grpc.Spec.Annotations:type_name -> grpc.Spec.AnnotationsEntry
	10, // 5: grpc.Spec.Linux:type_name -> grpc.Linux
	12, // 6: grpc.Spec.Solaris:type_name -> grpc.Solaris
	11, // 7: grpc.Spec.Windows:type_name -> grpc.Windows
	2,  // 8: grpc.Process.ConsoleSize:type_name -> grpc.Box
	3,  // 9: grpc.Process.User:type_name -> grpc.User
	4,  // 10: grpc.Process.Capabilities:type_name -> grpc.LinuxCapabilities
	5,  // 11: grpc.Process.Rlimits:type_name -> grpc.POSIXRlimit
	9,  // 12: grpc.Hooks.Prestart:type_name -> grpc.Hook
	9,  // 13: grpc.Hooks.Poststart:type_name -> grpc.Hook
	9,  // 14: grpc.Hooks.Poststop:type_name -> grpc.Hook
	9,  // 15: grpc.Hooks.CreateRuntime:type_name -> grpc.Hook
	9,  // 16: grpc.Hooks.CreateContainer:type_name -> grpc.Hook
	9,  // 17: grpc.Hooks.StartContainer:type_name -> grpc.Hook
	13, // 18: grpc.Linux.UIDMappings:type_name -> grpc.LinuxIDMapping
	13, // 19: grpc.Linux.GIDMappings:type_name -> grpc.LinuxIDMapping
	32, // 20: grpc.Linux.Sysctl:type_name -> grpc.Linux.SysctlEntry
	16, // 21: grpc.Linux.Resources:type_name -> grpc.LinuxResources
	14, // 22: grpc.Linux.Namespaces:type_name -> grpc.LinuxNamespace
	15, // 23: grpc.Linux.Devices:type_name -> grpc.LinuxDevice
	27, // 24: grpc.Linux.Seccomp:type_name -> grpc.LinuxSeccomp
	30, // 25: grpc.Linux.IntelRdt:type_name -> grpc.LinuxIntelRdt
	23, // 26: grpc.LinuxResources.Devices:type_name -> grpc.LinuxDeviceCgroup
	17, // 27: grpc.LinuxResources.Memory:type_name -> grpc.LinuxMemory
	18, // 28: grpc.LinuxResources.CPU:type_name -> grpc.LinuxCPU
	22, // 29: grpc.LinuxResources.Pids:type_name -> grpc.LinuxPids
	21, // 30: grpc.LinuxResources.BlockIO:type_name -> grpc.LinuxBlockIO
	25, // 31: grpc.LinuxResources.HugepageLimits:type_name -> grpc.LinuxHugepageLimit
	24, // 32: grpc.LinuxResources.Network:type_name -> grpc.LinuxNetwork
	19, // 33: grpc.LinuxBlockIO.WeightDevice:type_name -> grpc.LinuxWeightDevice
	20, // 34: grpc.LinuxBlockIO.ThrottleReadBpsDevice:type_name -> grpc.LinuxThrottleDevice
	20, // 35: grpc.LinuxBlockIO.ThrottleWriteBpsDevice:type_name -> grpc.LinuxThrottleDevice
	20, // 36: grpc.LinuxBlockIO.ThrottleReadIOPSDevice:type_name -> grpc.LinuxThrottleDevice
	20, // 37: grpc.LinuxBlockIO.ThrottleWriteIOPSDevice:type_name -> grpc.LinuxThrottleDevice
	26, // 38: grpc.LinuxNetwork.Priorities:type_name -> grpc.LinuxInterfacePriority
	29, // 39: grpc.LinuxSeccomp.Syscalls:type_name -> grpc.LinuxSyscall
	28, // 40: grpc.LinuxSyscall.Args:type_name -> grpc.LinuxSeccompArg
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_oci_proto_init() }
func file_oci_proto_init() {
	if File_oci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*POSIXRlimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Linux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Windows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solaris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxIDMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxCPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxWeightDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxThrottleDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxBlockIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxPids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxDeviceCgroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxHugepageLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxInterfacePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSeccomp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSeccompArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSyscall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oci_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxIntelRdt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_oci_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*LinuxSyscall_Errnoret)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oci_proto_goTypes,
		DependencyIndexes: file_oci_proto_depIdxs,
		MessageInfos:      file_oci_proto_msgTypes,
	}.Build()
	File_oci_proto = out.File
	file_oci_proto_rawDesc = nil
	file_oci_proto_goTypes = nil
	file_oci_proto_depIdxs = nil
}
