// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: keybroker.proto

package simple_kbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyBrokerServiceClient is the client API for KeyBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyBrokerServiceClient interface {
	GetBundle(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*BundleResponse, error)
	GetSecret(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*SecretResponse, error)
}

type keyBrokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyBrokerServiceClient(cc grpc.ClientConnInterface) KeyBrokerServiceClient {
	return &keyBrokerServiceClient{cc}
}

func (c *keyBrokerServiceClient) GetBundle(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*BundleResponse, error) {
	out := new(BundleResponse)
	err := c.cc.Invoke(ctx, "/keybroker.KeyBrokerService/GetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyBrokerServiceClient) GetSecret(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*SecretResponse, error) {
	out := new(SecretResponse)
	err := c.cc.Invoke(ctx, "/keybroker.KeyBrokerService/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyBrokerServiceServer is the server API for KeyBrokerService service.
// All implementations must embed UnimplementedKeyBrokerServiceServer
// for forward compatibility
type KeyBrokerServiceServer interface {
	GetBundle(context.Context, *BundleRequest) (*BundleResponse, error)
	GetSecret(context.Context, *SecretRequest) (*SecretResponse, error)
	mustEmbedUnimplementedKeyBrokerServiceServer()
}

// UnimplementedKeyBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyBrokerServiceServer struct {
}

func (UnimplementedKeyBrokerServiceServer) GetBundle(context.Context, *BundleRequest) (*BundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBundle not implemented")
}
func (UnimplementedKeyBrokerServiceServer) GetSecret(context.Context, *SecretRequest) (*SecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedKeyBrokerServiceServer) mustEmbedUnimplementedKeyBrokerServiceServer() {}

// UnsafeKeyBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyBrokerServiceServer will
// result in compilation errors.
type UnsafeKeyBrokerServiceServer interface {
	mustEmbedUnimplementedKeyBrokerServiceServer()
}

func RegisterKeyBrokerServiceServer(s grpc.ServiceRegistrar, srv KeyBrokerServiceServer) {
	s.RegisterService(&KeyBrokerService_ServiceDesc, srv)
}

func _KeyBrokerService_GetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyBrokerServiceServer).GetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keybroker.KeyBrokerService/GetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyBrokerServiceServer).GetBundle(ctx, req.(*BundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyBrokerService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyBrokerServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keybroker.KeyBrokerService/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyBrokerServiceServer).GetSecret(ctx, req.(*SecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyBrokerService_ServiceDesc is the grpc.ServiceDesc for KeyBrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyBrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keybroker.KeyBrokerService",
	HandlerType: (*KeyBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBundle",
			Handler:    _KeyBrokerService_GetBundle_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _KeyBrokerService_GetSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keybroker.proto",
}