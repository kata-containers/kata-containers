// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// 	http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package client_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DeviceState The valid states for a Device. So far, a device can only be in the Attached mode. Future valid values will be Detaching and Detached.
// swagger:model DeviceState
type DeviceState string

const (

	// DeviceStateAttached captures enum value "Attached"
	DeviceStateAttached DeviceState = "Attached"
)

// for schema
var deviceStateEnum []interface{}

func init() {
	var res []DeviceState
	if err := json.Unmarshal([]byte(`["Attached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceStateEnum = append(deviceStateEnum, v)
	}
}

func (m DeviceState) validateDeviceStateEnum(path, location string, value DeviceState) error {
	if err := validate.Enum(path, location, value, deviceStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this device state
func (m DeviceState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeviceStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
