name: kata-containers
version: "1.6.0-rc1"
summary: Build lightweight VMs that seamlessly plug into the containers ecosystem
description: |
  Kata Containers is an open source project and community working to build a
  standard implementation of lightweight Virtual Machines (VMs) that feel and
  perform like containers, but provide the workload isolation and security
  advantages of VMs
grade: stable
confinement: classic

parts:
  go:
    override-build: |
      versions_url=https://raw.githubusercontent.com/kata-containers/runtime/${SNAPCRAFT_PROJECT_VERSION}/versions.yaml
      version="$(curl -sSL ${versions_url} | yq r - languages.golang.version)"
      curl -LO https://dl.google.com/go/go${version}.src.tar.gz
      tar -xf go${version}.src.tar.gz --strip-components=1
      cd src && env GOROOT_BOOTSTRAP=$(go env GOROOT | tr -d '\n') ./make.bash
    build-packages:
      - golang-go
      - g++
      - curl
    build-snaps:
      - yq
    plugin: nil
    prime:
      - -*

  runtime:
    after: [go]
    plugin: nil
    build-attributes: [no-patchelf]
    override-build: |
      pkg_name=runtime

      # set GOPATH
      export GOPATH=$(realpath go)
      # go was built in parts/go/build
      export GOROOT=$(realpath ../../go/build)
      export PATH="${GOROOT}/bin:${PATH}"
      pkg_gopath=${GOPATH}/src/github.com/${SNAPCRAFT_PROJECT_NAME}/${pkg_name}
      mkdir -p ${pkg_gopath}

      # download source
      git clone -b ${SNAPCRAFT_PROJECT_VERSION} https://github.com/kata-containers/${pkg_name} ${pkg_gopath}
      cd ${pkg_gopath}

      # build and install
      make \
        PREFIX=/snap/${SNAPCRAFT_PROJECT_NAME}/current/usr \
        SKIP_GO_VERSION_CHECK=1 \
        QEMUCMD=qemu-system-$(arch)
      make install \
        PREFIX=/usr \
        DESTDIR=${SNAPCRAFT_PART_INSTALL} \
        SKIP_GO_VERSION_CHECK=1 \
        QEMUCMD=qemu-system-$(arch)

      # A snap is read-only squashfs, unfourtunately it's not possible to use the rootfs image with DAX
      # since rw access is required therefore initrd image must be used instead.
      sed -i -e '/^image =/d' ${SNAPCRAFT_PART_INSTALL}/usr/share/defaults/${SNAPCRAFT_PROJECT_NAME}/configuration.toml

  proxy:
    after: [go]
    plugin: nil
    build-attributes: [no-patchelf]
    override-build: |
      pkg_name=proxy

      # set GOPATH
      export GOPATH=$(realpath go)
      # go was built in parts/go/build
      export GOROOT=$(realpath ../../go/build)
      export PATH="${GOROOT}/bin:${PATH}"
      pkg_gopath=${GOPATH}/src/github.com/${SNAPCRAFT_PROJECT_NAME}/${pkg_name}
      mkdir -p ${pkg_gopath}

      # download source
      git clone -b ${SNAPCRAFT_PROJECT_VERSION} https://github.com/kata-containers/${pkg_name} ${pkg_gopath}
      cd ${pkg_gopath}

      # build and install
      make
      make install DESTDIR=${SNAPCRAFT_PART_INSTALL}

  shim:
    after: [go]
    plugin: nil
    build-attributes: [no-patchelf]
    override-build: |
      pkg_name=shim

      # set GOPATH
      export GOPATH=$(realpath go)
      # go was built in parts/go/build
      export GOROOT=$(realpath ../../go/build)
      export PATH="${GOROOT}/bin:${PATH}"
      pkg_gopath=${GOPATH}/src/github.com/${SNAPCRAFT_PROJECT_NAME}/${pkg_name}
      mkdir -p ${pkg_gopath}

      # download source
      git clone -b ${SNAPCRAFT_PROJECT_VERSION} https://github.com/kata-containers/${pkg_name} ${pkg_gopath}
      cd ${pkg_gopath}

      # build and install
      make
      make install LIBEXECDIR=${SNAPCRAFT_PART_INSTALL}/usr/libexec

  image:
    source: http://github.com/kata-containers/osbuilder
    source-type: git
    after: [go]
    plugin: make
    build-packages:
      - docker.io
      - cpio
    override-build: |
      # set GOPATH
      export GOPATH=$(realpath go)
      mkdir -p "${GOPATH}"
      # go was built in parts/go/build
      export GOROOT=$(realpath ../../go/build)
      export PATH="${GOROOT}/bin:${PATH}"
      if [ -n "$http_proxy" ]; then
        echo "Setting proxy $http_proxy"
        sudo -E systemctl set-environment http_proxy=$http_proxy || true
        sudo -E systemctl set-environment https_proxy=$https_proxy || true
      fi

      echo "Unmasking docker service"
      sudo -E systemctl unmask docker.service || true
      sudo -E systemctl unmask docker.socket || true

      echo "Adding $USER into docker group"
      sudo -E gpasswd -a $USER docker

      echo "Starting docker"
      sudo -E systemctl start docker || true

      # use the same go version for all packages
      sed -i 's|^GO_VERSION=.*|GO_VERSION='$(go version | cut -d' ' -f3 | tr -d go)'|g' rootfs-builder/versions.txt

      sudo -E PATH=$PATH make AGENT_VERSION=${SNAPCRAFT_PROJECT_VERSION} DISTRO=alpine AGENT_INIT=yes USE_DOCKER=1 initrd

      kata_image_dir=${SNAPCRAFT_PART_INSTALL}/usr/share/kata-containers
      mkdir -p ${kata_image_dir}
      cp kata-containers-initrd.img ${kata_image_dir}

  ksm-throttler:
    after: [go]
    plugin: nil
    build-attributes: [no-patchelf]
    override-build: |
      pkg_name=ksm-throttler

      # set GOPATH
      export GOPATH=$(realpath go)
      # go was built in parts/go/build
      export GOROOT=$(realpath ../../go/build)
      export PATH="${GOROOT}/bin:${PATH}"
      pkg_gopath=${GOPATH}/src/github.com/${SNAPCRAFT_PROJECT_NAME}/${pkg_name}
      mkdir -p ${pkg_gopath}

      # download source
      git clone -b ${SNAPCRAFT_PROJECT_VERSION} https://github.com/kata-containers/${pkg_name} ${pkg_gopath}
      cd ${pkg_gopath}

      # build and install
      make TARGET=kata-ksm-throttler
      make install \
        DESTDIR=${SNAPCRAFT_PART_INSTALL} \
        TARGET=kata-ksm-throttler

  kernel:
    override-pull: |
      versions_url=https://raw.githubusercontent.com/kata-containers/runtime/${SNAPCRAFT_PROJECT_VERSION}/versions.yaml
      version="$(curl -sSL ${versions_url} | yq r - assets.kernel.version | tr -d v)"
      url="$(curl -sSL ${versions_url} | yq r - assets.kernel.url)"
      curl -LO ${url}/linux-${version}.tar.xz
      tar -xf linux-${version}.tar.xz --strip-components=1
    after: [kernel-dump]
    plugin: kernel
    build-packages:
      - libelf-dev
      - curl
      - build-essential
      - bison
      - flex
    build-snaps:
      - yq
    override-build: |
      versions_url=https://raw.githubusercontent.com/kata-containers/runtime/${SNAPCRAFT_PROJECT_VERSION}/versions.yaml
      version="$(curl -sSL ${versions_url} | yq r - assets.kernel.version | tr -d v)"
      x_version="$(echo $version | sed -e 's|.[[:digit:]]*$||').x"
      case "$(arch)" in
        "x86_64")
          config="x86_64_kata_kvm_${x_version}"
        ;;

        "ppc64le")
          config="powerpc_kata_kvm_${x_version}"
        ;;

        "aarch64")
          config="arm64_kata_kvm_${x_version}"
        ;;

        "s390x")
          config="s390_kata_kvm_${x_version}"
        ;;

        *)
          echo "ERROR: Unsupported architecture $(arch)"
          exit 1
        ;;
      esac

      make mrproper

      # Apply patches
      for patch in ${SNAPCRAFT_STAGE}/kernel/patches/*.patch; do
        echo "Applying $(basename "$patch") ..."
        patch \
          --batch \
          --forward \
          --strip 1 \
          --input "$patch"
      done

      # Copy config file
      cp ${SNAPCRAFT_STAGE}/kernel/configs/${config} .config
      make -s oldconfig EXTRAVERSION=".container" > /dev/null
      make -j $(($(nproc)-1)) EXTRAVERSION=".container"

      kernel_suffix=${version}.container
      kata_kernel_dir=${SNAPCRAFT_PART_INSTALL}/usr/share/kata-containers
      mkdir -p ${kata_kernel_dir}

      # Install bz kernel
      make install INSTALL_PATH=${kata_kernel_dir} EXTRAVERSION=".container" || true
      vmlinuz_name=vmlinuz-${kernel_suffix}
      ln -sf ${vmlinuz_name} ${kata_kernel_dir}/vmlinuz.container

      # Install raw kernel
      vmlinux_name=vmlinux-${kernel_suffix}
      cp vmlinux ${kata_kernel_dir}/${vmlinux_name}
      ln -sf ${vmlinux_name} ${kata_kernel_dir}/vmlinux.container

  kernel-dump:
    source: kernel
    plugin: dump
    organize:
      '*' : kernel/
    prime:
      - -*

  qemu:
    plugin: make
    after: [qemu-scripts-dump, qemu-lite-patches-dump, qemu-aarch64-patches-dump]
    build-packages:
      - gcc
      - python
      - zlib1g-dev
      - libcap-ng-dev
      - libglib2.0-dev
      - libpixman-1-dev
      - libnuma-dev
      - libltdl-dev
      - libcap-dev
      - libattr1-dev
      - libfdt-dev
      - curl
      - libcapstone-dev
    build-snaps:
      - yq
    override-build: |
      pkg_name="qemu"

      versions_url=https://raw.githubusercontent.com/kata-containers/runtime/${SNAPCRAFT_PROJECT_VERSION}/versions.yaml
      # arch-specific definition
      case "$(arch)" in
        "aarch64")
          branch="$(curl -sSL ${versions_url} | yq r - assets.hypervisor.qemu.architecture.aarch64.branch)"
          url="$(curl -sSL ${versions_url} | yq r - assets.hypervisor.qemu.url)"
          commit="$(curl -sSL ${versions_url} | yq r - assets.hypervisor.qemu.architecture.aarch64.commit)"
          patch_dir="${SNAPCRAFT_STAGE}/qemu-aarch64/patches/"
        ;;

        *)
          branch="$(curl -sSL ${versions_url} | yq r - assets.hypervisor.qemu-lite.branch)"
          url="$(curl -sSL ${versions_url} | yq r - assets.hypervisor.qemu-lite.url)"
          commit="$(curl -sSL ${versions_url} | yq r - assets.hypervisor.qemu-lite.commit)"
          patch_dir="${SNAPCRAFT_STAGE}/qemu-lite/patches/"
        ;;
      esac

      # download source
      git clone --branch ${branch} --single-branch ${url} ${pkg_name}
      cd ${pkg_name}
      git checkout ${commit}

      [ -n "$(ls -A ui/keycodemapdb)" ] || git clone https://github.com/qemu/keycodemapdb ui/keycodemapdb/
      [ -n "$(ls -A capstone)" ] || git clone https://github.com/qemu/capstone capstone

      # Apply patches
      for patch in ${patch_dir}/*.patch; do
        echo "Applying $(basename "$patch") ..."
        patch \
          --batch \
          --forward \
          --strip 1 \
          --input "$patch"
      done

      chmod +x ${SNAPCRAFT_STAGE}/qemu/scripts/configure-hypervisor.sh
      # static build
      echo "$(${SNAPCRAFT_STAGE}/qemu/scripts/configure-hypervisor.sh -s qemu) \
        --disable-rbd
        --prefix=/snap/${SNAPCRAFT_PROJECT_NAME}/current/usr \
        --datadir=/snap/${SNAPCRAFT_PROJECT_NAME}/current/usr/share \
        --libexecdir=/snap/${SNAPCRAFT_PROJECT_NAME}/current/usr/libexec/qemu" \
        | xargs ./configure

      # build and install
      make -j $(($(nproc)-1))
      make install DESTDIR=${SNAPCRAFT_PART_INSTALL}
    prime:
      - -snap/
      - -usr/var/
      - -usr/libexec/
      - -usr/bin/qemu-ga
      - -usr/bin/qemu-pr-helper
      - -usr/bin/virtfs-proxy-helper
      - usr/*
      - lib/*
    organize:
      # Hack: move qemu to /
      "snap/kata-containers/current/": "./"

  qemu-scripts-dump:
    source: scripts
    plugin: dump
    organize:
      '*' : qemu/scripts/
    prime:
      - -*
  qemu-lite-patches-dump:
    source: obs-packaging/qemu-lite/patches/
    plugin: dump
    organize:
      '*' : qemu-lite/patches/
    prime:
      - -*
  qemu-aarch64-patches-dump:
    source: obs-packaging/qemu-aarch64/patches/
    plugin: dump
    organize:
      '*' : qemu-aarch64/patches/
    prime:
      - -*

apps:
  runtime:
    command: usr/bin/kata-runtime
